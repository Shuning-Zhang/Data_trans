47_1_0

def transform_dataset(test_set):
    return [sum(test_set, [])]

# Example usage with the test set
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['KK'], ['L'], ['MM'], ['N'], ['O'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['P'], ['O'], ['N'], ['Q'], ['HH'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_dataset(test_set)
print(output)

47_2_0

def transform_dataset(test_dataset):
    output_dataset = []
    temp = []
    
    for item in test_dataset:
        temp.append(item[0])
        if len(temp) == 5:
            output_dataset.append(temp)
            temp = []
    
    if temp:
        output_dataset.append(temp)
    
    return output_dataset

# Test the function
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['P'], ['O'], ['N'], ['Q'], ['HH'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
print(transform_dataset(test_set))

47_3_0

def transform_dataset(test_set):
    chunk_size = 5
    transformed_output = [test_set[i:i + chunk_size] for i in range(0, len(test_set), chunk_size)]
    transformed_output = [[item[0] for item in chunk] for chunk in transformed_output]
    return transformed_output

# Example usage
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_dataset(test_set)
print(output)  # [['F', 'G', 'H', 'I', 'JJ'], ['II', 'L', 'Y', 'B', 'W'], ['DD', 'LL', 'U', 'AA', 'W']]

47_4_0

def transform_dataset(test_set):
    output = []
    temp_list = []

    for item in test_set:
        temp_list.extend(item)
        if len(temp_list) == 5:
            output.append(temp_list)
            temp_list = []

    if temp_list:
        output.append(temp_list)

    return output

test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
result = transform_dataset(test_set)
print(result)

47_5_0

def transform_data(test_set):
    result = []
    current_group = []
    count = 0
    for item in test_set:
        current_group.append(item[0])
        count += 1
        if count == 5:
            result.append(current_group)
            current_group = []
            count = 0
    if current_group:
        result.append(current_group)
    return result

# Test the function
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_data(test_set)
print(output)

47_1_1

def transform_dataset(test_set):
    return [sum(test_set, [])]

# Example usage with the test set
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['KK'], ['L'], ['MM'], ['N'], ['O'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['P'], ['O'], ['N'], ['Q'], ['HH'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_dataset(test_set)
print(output)

47_2_1

def transform_dataset(test_dataset):
    output_dataset = []
    temp = []
    
    for item in test_dataset:
        temp.append(item[0])
        if len(temp) == 5:
            output_dataset.append(temp)
            temp = []
    
    if temp:
        output_dataset.append(temp)
    
    return output_dataset

# Test the function
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['P'], ['O'], ['N'], ['Q'], ['HH'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
print(transform_dataset(test_set))

47_3_1

def transform_dataset(test_set):
    chunk_size = 5
    transformed_output = [test_set[i:i + chunk_size] for i in range(0, len(test_set), chunk_size)]
    transformed_output = [[item[0] for item in chunk] for chunk in transformed_output]
    return transformed_output

# Example usage
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_dataset(test_set)
print(output)

47_4_1

def transform_dataset(test_set):
    output = []
    temp_list = []
    count = 0
    for item in test_set:
        temp_list.append(item[0])
        count += 1
        if count == 5:
            output.append(temp_list)
            temp_list = []
            count = 0
    if temp_list:
        output.append(temp_list)
    return output

# Test the function
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
print(transform_dataset(test_set))

47_5_1

def transform_data(test_set):
    result = []
    current_group = []
    
    for item in test_set:
        current_group.extend(item)
        if len(current_group) == 5:
            result.append(current_group)
            current_group = []
    
    if current_group: # Adding remaining elements if any after loop
        result.append(current_group)
    
    return result

test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
transformed_data = transform_data(test_set)
print(transformed_data)

47_1_2

def transform_dataset(test_set):
    return [sum(test_set, [])]

# Example usage with the test set
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['KK'], ['L'], ['MM'], ['N'], ['O'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['P'], ['O'], ['N'], ['Q'], ['HH'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_dataset(test_set)
print(output)

47_2_2

def transform_dataset(test_dataset):
    output_dataset = []
    temp = []
    
    for item in test_dataset:
        temp.append(item[0])
        if len(temp) == 5:
            output_dataset.append(temp)
            temp = []
    
    if temp:
        output_dataset.append(temp)
    
    return output_dataset

# Test the function
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['P'], ['O'], ['N'], ['Q'], ['HH'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
print(transform_dataset(test_set))

47_3_2

def transform_dataset(test_set):
    chunk_size = 5
    transformed_output = [test_set[i:i + chunk_size] for i in range(0, len(test_set), chunk_size)]
    transformed_output = [[item[0] for item in chunk] for chunk in transformed_output]
    return transformed_output

# Example usage
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_dataset(test_set)
print(output)

47_4_2

def transform_dataset(test_set):
    output = []
    temp_list = []
    count = 0
    for item in test_set:
        temp_list.append(item[0])
        count += 1
        if count == 5:
            output.append(temp_list)
            temp_list = []
            count = 0
    if temp_list:
        output.append(temp_list)
    return output

# Test the function
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
print(transform_dataset(test_set))

47_5_2

def transform_data(test_set):
    result = []
    current_group = []
    count = 0
    for item in test_set:
        current_group.append(item[0])
        count += 1
        if count == 5:
            result.append(current_group)
            current_group = []
            count = 0
    if current_group:
        result.append(current_group)
        
    return result

# Test the function
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_data(test_set)
print(output)

47_1_3

def transform_dataset(test_set):
    return [sum(test_set, [])]

# Example usage with the test set
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['KK'], ['L'], ['MM'], ['N'], ['O'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['P'], ['O'], ['N'], ['Q'], ['HH'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_dataset(test_set)
print(output)

47_2_3

def transform_dataset(test_set):
    result = []
    temp = []
    
    for i in range(len(test_set)):
        temp.append(test_set[i][0])
        if (i + 1) % 5 == 0:
            result.append(temp)
            temp = []
    
    if temp:
        result.append(temp)
    
    return result

# Example usage with the test set
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], 
            ['P'], ['O'], ['N'], ['Q'], ['HH'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]

output = transform_dataset(test_set)
print(output)

47_3_3

def transform_dataset(test_set):
    chunk_size = 5
    transformed_output = [test_set[i:i + chunk_size] for i in range(0, len(test_set), chunk_size)]
    transformed_output = [[item[0] for item in chunk] for chunk in transformed_output]
    return transformed_output

# Example usage
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_dataset(test_set)
print(output)

47_4_3

def transform_dataset(test_set):
    output = []
    temp_list = []
    count = 0
    for item in test_set:
        temp_list.append(item[0])
        count += 1
        if count == 5:
            output.append(temp_list)
            temp_list = []
            count = 0
    if temp_list:
        output.append(temp_list)
    return output

# Test the function
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
print(transform_dataset(test_set))

47_5_3

def transform_data(test_set):
    result = []
    current_group = []
    
    for elem in test_set:
        current_group.extend(elem)
        if len(current_group) == 5:
            result.append(current_group)
            current_group = []
    
    if current_group: # Adding remaining elements if any
        result.append(current_group)
    
    return result

# Test case
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_data(test_set)
print(output)

47_1_4

def transform_dataset(test_set):
    return [sum(test_set, [])]

# Example usage with the test set
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['KK'], ['L'], ['MM'], ['N'], ['O'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['P'], ['O'], ['N'], ['Q'], ['HH'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_dataset(test_set)
print(output)

47_2_4

def transform_dataset(test_dataset):
    output_dataset = []
    temp = []
    
    for item in test_dataset:
        temp.append(item[0])
        if len(temp) == 5:
            output_dataset.append(temp)
            temp = []
    
    if temp:
        output_dataset.append(temp)
    
    return output_dataset

# Test the function
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['P'], ['O'], ['N'], ['Q'], ['HH'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
print(transform_dataset(test_set))

47_3_4

def transform_dataset(test_set):
    chunk_size = 5
    transformed_output = [test_set[i:i + chunk_size] for i in range(0, len(test_set), chunk_size)]
    transformed_output = [[item[0] for item in chunk] for chunk in transformed_output]
    return transformed_output

# Example usage
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_dataset(test_set)
print(output)

47_4_4

def transform_dataset(test_set):
    output = []
    temp_list = []

    for item in test_set:
        temp_list.extend(item)
        if len(temp_list) == 5:
            output.append(temp_list)
            temp_list = []

    if temp_list:
        output.append(temp_list)

    return output

test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
result = transform_dataset(test_set)
print(result)

47_5_4

def transform_data(test_set):
    result = []
    current_group = []
    count = 0
    for item in test_set:
        current_group.append(item[0])
        count += 1
        if count == 5:
            result.append(current_group)
            current_group = []
            count = 0
    if current_group:
        result.append(current_group)
        
    return result

# Test the function
test_set = [['F'], ['G'], ['H'], ['I'], ['JJ'], ['II'], ['L'], ['Y'], ['B'], ['W'], ['DD'], ['LL'], ['U'], ['AA'], ['W']]
output = transform_data(test_set)
print(output)

37_1_0

def transform_dataset(input_dataset):
    output_dataset = []
    temp_row = []
    for entry in input_dataset:
        if entry != ['']:
            temp_row.append(entry[0])
        if len(temp_row) == 11:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Example usage
test_input = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

print(transform_dataset(test_input))

37_2_0

def transform_dataset(input_dataset):
    output_dataset = []
    temp_row = []
    for item in input_dataset:
        if item[0] != '':
            temp_row.append(item[0])
        if len(temp_row) == 10:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Test the function
test_set = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

print(transform_dataset(test_set))

37_3_0

def transform_dataset(input_data):
    result = []
    record = []
    for item in input_data:
        if item != ['']:
            record.extend(item)
        else:
            if record:
                result.append(record.copy())
                record = []
    
    if record:
        result.append(record)
    
    return result

# Test set
test_set = [['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']]

# Transform the test set
output = transform_dataset(test_set)

37_4_0

def transform_dataset(input_data):
    result = []
    temp = []
    
    for item in input_data:
        if item != ['']:
            temp.append(item[0])
        else:
            if temp:
                result.append(temp)
            temp = []
    
    if temp:  # Add the last parsed entry if not added.
        result.append(temp)
    
    return result

# Test set
test_input = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'],
    ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'],
    ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

# Transform the test set
transformed_output = transform_dataset(test_input)

37_5_0

def transform_dataset(input_data):
    num_cols = 10
    output = []
    temp = []

    for row in input_data:
        if row:
            temp.append(row[0]) if row[0] != '' else None
            if len(temp) == num_cols:
                output.append(temp)
                temp = []
    return output

# Test set
test_input = [['Last, First middle'], [''], ['Organization'], ['Position'], 
              ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], 
              ['Email'], ['Chapter']]

print(transform_dataset(test_input))

37_1_1

def transform_dataset(input_dataset):
    output_dataset = []
    temp_row = []
    for entry in input_dataset:
        if entry != ['']:
            temp_row.append(entry[0])
        if len(temp_row) == 11:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Example usage
test_input = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

print(transform_dataset(test_input))

37_2_1

def transform_dataset(input_dataset):
    output_dataset = []
    temp_row = []
    for item in input_dataset:
        if item[0] != '':
            temp_row.append(item[0])
        if len(temp_row) == 10:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Test the function
test_set = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

print(transform_dataset(test_set))

37_3_1

def transform_dataset(input_data):
    result = []
    record = []
    for item in input_data:
        if item != ['']:
            record.extend(item)
        if len(record) == 10:
            result.append(record)
            record = []
    return result

# Test the function
test_set = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'],
    ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], ['Last, First middle'],
    [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'],
    ['Fax'], ['Email'], ['Chapter'], ['Last, First middle'], [''], ['Organization'],
    ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

output = transform_dataset(test_set)
print(output) 

37_4_1

def transform_dataset(input_data):
    result = []
    temp = []
    
    for item in input_data:
        if item != ['']:
            temp.append(item[0])
            if len(temp) == 10:
                result.append(temp)
                temp = []
    
    return result

# Example usage
test_input = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], 
    ['Phone'], ['Fax'], ['Email'], ['Chapter'], 
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], 
    ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

output = transform_dataset(test_input)
print(output)

37_5_1

def transform_dataset(input_data):
    num_cols = 10
    output = []
    temp = []

    for row in input_data:
        if row:
            temp.append(row[0]) if row[0] != '' else None
            if len(temp) == num_cols:
                output.append(temp)
                temp = []
    return output

# Test the function
test_data = [['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']]
print(transform_dataset(test_data))

37_1_2

def transform_dataset(input_dataset):
    output_dataset = []
    temp_row = []
    for entry in input_dataset:
        if entry != ['']:
            temp_row.append(entry[0])
        if len(temp_row) == 11:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Example usage
test_input = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

print(transform_dataset(test_input))

37_2_2

def transform_dataset(input_dataset):
    output_dataset = []
    temp_row = []
    for item in input_dataset:
        if item[0] != '':
            temp_row.append(item[0])
        if len(temp_row) == 10:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Test the function
test_set = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

print(transform_dataset(test_set))

37_3_2

def transform_dataset(input_data):
    result = []
    record = []
    for item in input_data:
        if item != ['']:
            record.extend(item)
        if len(record) == 10:
            result.append(record)
            record = []
    return result

# Test the function
test_set = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'],
    ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], ['Last, First middle'],
    [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'],
    ['Fax'], ['Email'], ['Chapter'], ['Last, First middle'], [''], ['Organization'],
    ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

output = transform_dataset(test_set)
print(output) 

37_4_2

def transform_dataset(input_data):
    result = []
    temp = []
    
    for item in input_data:
        if item != ['']:
            temp.append(item[0])
            if len(temp) == 10:
                result.append(temp)
                temp = []
    
    return result

# Test the function with the provided test set
test_set = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'],
    ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'],
    ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

37_5_2

def transform_dataset(input_data):
    num_cols = 10
    output = []
    temp = []

    for row in input_data:
        if row:
            temp.append(row[0]) if row[0] != '' else None
            if len(temp) == num_cols:
                output.append(temp)
                temp = []
    return output

# Test set
test_input = [['Last, First middle'], [''], ['Organization'], ['Position'], 
              ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], 
              ['Email'], ['Chapter']]

# Example on how to use the function with the test set
result = transform_dataset(test_input)
print(result)

37_1_3

def transform_dataset(input_dataset):
    output_dataset = []
    temp_row = []
    for entry in input_dataset:
        if entry != ['']:
            temp_row.append(entry[0])
        if len(temp_row) == 11:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Example usage
test_input = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

transformed_output = transform_dataset(test_input)

37_2_3

def transform_dataset(input_dataset):
    output_dataset = []
    temp_row = []
    for item in input_dataset:
        if item[0] != '':
            temp_row.append(item[0])
        if len(temp_row) == 10:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Test the function
test_set = [['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], 
            ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], 
            ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], 
            ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']]

print(transform_dataset(test_set))

37_3_3

def transform_dataset(input_data):
    result = []
    record = []
    for item in input_data:
        if item != ['']:
            record.extend(item)
        if len(record) == 10:
            result.append(record)
            record = []
    return result

# Test the function
test_set = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'],
    ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], ['Last, First middle'],
    [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'],
    ['Fax'], ['Email'], ['Chapter'], ['Last, First middle'], [''], ['Organization'],
    ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

output = transform_dataset(test_set)
print(output) 

37_4_3

def transform_dataset(input_data):
    result = []
    temp = []
    
    for item in input_data:
        if item != ['']:
            temp.append(item[0])
        else:
            if temp:
                result.append(temp)
            temp = []
    
    if temp:  # Add the last temp list if not added
        result.append(temp)
    
    return result

# Test set
test_input = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'],
    ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'],
    ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

# Transform the test set
transformed_output = transform_dataset(test_input)

37_5_3

def transform_dataset(input_data):
    num_cols = 10
    output = []
    temp = []

    for row in input_data:
        if row:
            temp.append(row[0]) if row[0] != '' else None
            if len(temp) == num_cols:
                output.append(temp)
                temp = []
    return output

# Test the function
test_data = [['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']]
print(transform_dataset(test_data))

37_1_4

def transform_dataset(input_dataset):
    output_dataset = []
    temp_row = []
    for entry in input_dataset:
        if entry != ['']:
            temp_row.append(entry[0])
        if len(temp_row) == 11:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Example usage
test_input = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

print(transform_dataset(test_input))

37_2_4

def transform_dataset(input_dataset):
    output_dataset = []
    temp_row = []
    for item in input_dataset:
        if item[0] != '':
            temp_row.append(item[0])
        if len(temp_row) == 10:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Test the function
test_set = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'],
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

print(transform_dataset(test_set))

37_3_4

def transform_dataset(input_data):
    result = []
    record = []
    for item in input_data:
        if item != ['']:
            record.extend(item)
        else:
            if record:
                result.append(record.copy())
                record = []
    
    if record:
        result.append(record)
    
    return result

# Test the function
test_set = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], 
    ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], 
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], 
    ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], 
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], 
    ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

output = transform_dataset(test_set)
print(output)

37_4_4

def transform_dataset(input_data):
    result = []
    temp = []
    
    for item in input_data:
        if item != ['']:
            temp.append(item[0])
        else:
            if temp:
                result.append(temp)
            temp = []
    
    if temp:  # Add the last temp list if not added
        result.append(temp)
    
    return result

# Test set
test_input = [
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], 
    ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter'], 
    ['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], 
    ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']
]

# Generate output
output = transform_dataset(test_input)
print(output)

37_5_4

def transform_dataset(input_data):
    num_cols = 10
    output = []
    temp = []

    for row in input_data:
        if row:
            temp.append(row[0]) if row[0] != '' else None
            if len(temp) == num_cols:
                output.append(temp)
                temp = []
    return output

# Test the function
test_data = [['Last, First middle'], [''], ['Organization'], ['Position'], ['Rank'], ['City'], ['State/Province'], ['Phone'], ['Fax'], ['Email'], ['Chapter']]
print(transform_dataset(test_data))

29_1_0

def transform_data(dataset):
    result = []
    for i in range(0, len(dataset), 2):
        business_name = dataset[i][0]
        sums = dataset[i][2:]
        counts = dataset[i+1][2:]
        combined = [business_name]
        for sum_value, count in zip(sums, counts):
            combined.extend([sum_value, count])
        result.append(combined)
    return result

# Test set
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['XYZ', 'Sum of Invoices', '832,414', '897,949', '712,365', '2,442,728'],
    ['', 'Count of Invoices', '67', '63', '52', '182'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['TBD', 'Sum of Invoices', '968,331', '717,397', '683,145', '2,368,873'],
    ['', 'Count of Invoices', '43', '28', '47', '118'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

# Transforming the test set
transformed_test_set = transform_data(test_set)

# Output the transformed test set
print(transformed_test_set)

29_2_0

def transform_dataset(input_data):
    output_data = []
    for i in range(0, len(input_data), 2):
        company = input_data[i][0]
        sum_of_invoices = input_data[i][2:]
        count_of_invoices = input_data[i + 1][2:]
        combined = [company]
        for sum_inv, count_inv in zip(sum_of_invoices, count_of_invoices):
            combined.append(sum_inv)
            combined.append(count_inv)
        output_data.append(combined)
    return output_data

# Test the function
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['TBD', 'Sum of Invoices', '968,331', '717,397', '683,145', '2,368,873'],
    ['', 'Count of Invoices', '43', '28', '47', '118'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

29_3_0

def transform_data(test_set):
    result = []
    for i in range(0, len(test_set), 2):
        row1 = test_set[i]
        row2 = test_set[i+1]
        merged_row = [row1[0]] + [item for pair in zip(row1[2:], row2[2:]) for item in pair]
        result.append(merged_row)
    return result

# Example usage:
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

output = transform_data(test_set)
print(output)

29_4_0

def transform_dataset(test_set):
    transformed_data = []
    for i in range(0, len(test_set), 2):
        row = [test_set[i][0]]  # Get the company code
        invoices = test_set[i][2:]  # Get sum of invoices
        counts = test_set[i + 1][2:]  # Get count of invoices
        combined = [val for pair in zip(invoices, counts) for val in pair]
        transformed_data.append(row + combined)
    return transformed_data

test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

output = transform_dataset(test_set)
print(output)

29_5_0

def transform_dataset(test_set):
    transformed_data = []
    for i in range(0, len(test_set), 2):
        company_data = [test_set[i][0]] + test_set[i][2:] + test_set[i+1][2:]
        transformed_data.append(company_data)
    return transformed_data

# Test the function
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

output_test_set = transform_dataset(test_set)
print(output_test_set)

29_1_1

def transform_data(dataset):
    result = []
    for i in range(0, len(dataset), 2):
        business_name = dataset[i][0]
        sums = dataset[i][2:]
        counts = dataset[i+1][2:]
        combined = [business_name]
        for sum_value, count in zip(sums, counts):
            combined.extend([sum_value, count])
        result.append(combined)
    return result

# Test set
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['XYZ', 'Sum of Invoices', '832,414', '897,949', '712,365', '2,442,728'],
    ['', 'Count of Invoices', '67', '63', '52', '182'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['TBD', 'Sum of Invoices', '968,331', '717,397', '683,145', '2,368,873'],
    ['', 'Count of Invoices', '43', '28', '47', '118'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

# Transforming the test set
transformed_test_set = transform_data(test_set)

# Output the transformed test set
print(transformed_test_set)

29_2_1

def transform_dataset(input_data):
    output_data = []
    for i in range(0, len(input_data), 2):
        company = input_data[i][0]
        sum_of_invoices = input_data[i][2:]
        count_of_invoices = input_data[i + 1][2:]
        combined = [company]
        for sum_inv, count_inv in zip(sum_of_invoices, count_of_invoices):
            combined.append(sum_inv)
            combined.append(count_inv)
        output_data.append(combined)
    return output_data

# Test the function
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['TBD', 'Sum of Invoices', '968,331', '717,397', '683,145', '2,368,873'],
    ['', 'Count of Invoices', '43', '28', '47', '118'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

29_3_1

def transform_data(test_set):
    result = []
    for i in range(0, len(test_set), 2):
        new_row = [test_set[i][0]]
        for j in range(2, len(test_set[i])):
            new_row.append(test_set[i][j])
            new_row.append(test_set[i + 1][j])
        result.append(new_row)
    return result

test_set = [['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'], 
            ['', 'Count of Invoices', '60', '76', '42', '178'], 
            ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'], 
            ['', 'Count of Invoices', '79', '12', '40', '131'], 
            ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'], 
            ['', 'Count of Invoices', '71', '20', '62', '153']]

output = transform_data(test_set)
print(output)

29_4_1

def transform_dataset(test_set):
    transformed_data = []
    for i in range(0, len(test_set), 2):
        row = [test_set[i][0]]  # Get the company code
        invoices = test_set[i][2:]  # Get sum of invoices
        counts = test_set[i + 1][2:]  # Get count of invoices
        combined = [val for pair in zip(invoices, counts) for val in pair]
        transformed_data.append(row + combined)
    return transformed_data

test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

output = transform_dataset(test_set)
print(output)

29_5_1

def transform_dataset(test_set):
    transformed_data = []
    for i in range(0, len(test_set), 2):
        company_data = [test_set[i][0]]  # Get the company name
        for j in range(2, len(test_set[i])):
            company_data.append(test_set[i][j])
            company_data.append(test_set[i + 1][j])
        transformed_data.append(company_data)
    return transformed_data

# Test dataset
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

# Transform the test dataset
output_test_set = transform_dataset(test_set)
print(output_test_set)

29_1_2

def transform_data(dataset):
    result = []
    for i in range(0, len(dataset), 2):
        business_name = dataset[i][0]
        sums = dataset[i][2:]
        counts = dataset[i+1][2:]
        combined = [business_name]
        for sum_value, count_value in zip(sums, counts):
            combined.append(sum_value)
            combined.append(count_value)
        result.append(combined)
    return result

# Test set
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'], 
    ['', 'Count of Invoices', '60', '76', '42', '178'], 
    ['XYZ', 'Sum of Invoices', '832,414', '897,949', '712,365', '2,442,728'], 
    ['', 'Count of Invoices', '67', '63', '52', '182'], 
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'], 
    ['', 'Count of Invoices', '79', '12', '40', '131'], 
    ['TBD', 'Sum of Invoices', '968,331', '717,397', '683,145', '2,368,873'], 
    ['', 'Count of Invoices', '43', '28', '47', '118'], 
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'], 
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

# Transforming the test set
output = transform_data(test_set)
for line in output:
    print(line)

29_2_2

def transform_dataset(input_data):
    output_data = []
    for i in range(0, len(input_data), 2):
        company = input_data[i][0]
        sum_of_invoices = input_data[i][2:]
        count_of_invoices = input_data[i + 1][2:]
        combined = [company]
        for sum_inv, count_inv in zip(sum_of_invoices, count_of_invoices):
            combined.append(sum_inv)
            combined.append(count_inv)
        output_data.append(combined)
    return output_data

# Test the function
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['TBD', 'Sum of Invoices', '968,331', '717,397', '683,145', '2,368,873'],
    ['', 'Count of Invoices', '43', '28', '47', '118'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

29_3_2

def transform_data(test_set):
    result = []
    for i in range(0, len(test_set), 2):
        row1 = test_set[i]
        row2 = test_set[i+1]
        merged_row = [row1[0]]
        for j in range(2, len(row1)):
            merged_row.extend([row1[j], row2[j]])
        result.append(merged_row)
    return result

test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'], 
    ['', 'Count of Invoices', '60', '76', '42', '178'], 
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'], 
    ['', 'Count of Invoices', '79', '12', '40', '131'], 
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'], 
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

output = transform_data(test_set)
print(output)

29_4_2

def transform_dataset(test_set):
    transformed_set = []
    for i in range(0, len(test_set), 2):
        entry = [test_set[i][0]]  # Get the company code
        invoices = test_set[i][2:]  # Get sum of invoices
        counts = test_set[i + 1][2:]  # Get count of invoices
        combined = [val for pair in zip(invoices, counts) for val in pair]
        transformed_set.append(entry + combined)
    return transformed_set

test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

output = transform_dataset(test_set)
print(output)

29_5_2

def transform_dataset(test_set):
    transformed_data = []
    for i in range(0, len(test_set), 2):
        company_data = [test_set[i][0]]  # Get the company name
        for j in range(2, len(test_set[i])):  # Collect the sum of invoices data
            company_data.append(test_set[i][j])
            company_data.append(test_set[i+1][j])  # Collect the corresponding count of invoices data
        transformed_data.append(company_data)
    return transformed_data

# Test the function with the provided test set
test_set = [['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
            ['', 'Count of Invoices', '60', '76', '42', '178'],
            ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
            ['', 'Count of Invoices', '79', '12', '40', '131'],
            ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
            ['', 'Count of Invoices', '71', '20', '62', '153']]

output = transform_dataset(test_set)
print(output)

29_1_3

def transform_data(dataset):
    result = []
    for i in range(0, len(dataset), 2):
        business_name = dataset[i][0]
        sums = dataset[i][2:]
        counts = dataset[i+1][2:]
        combined = [business_name]
        for sum_value, count in zip(sums, counts):
            combined.extend([sum_value, count])
        result.append(combined)
    return result

# Test set
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['XYZ', 'Sum of Invoices', '832,414', '897,949', '712,365', '2,442,728'],
    ['', 'Count of Invoices', '67', '63', '52', '182'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['TBD', 'Sum of Invoices', '968,331', '717,397', '683,145', '2,368,873'],
    ['', 'Count of Invoices', '43', '28', '47', '118'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

# Transforming the test set
transformed_test_set = transform_data(test_set)

# Output the transformed test set
print(transformed_test_set)

29_2_3

def transform_dataset(input_data):
    output_data = []
    for i in range(0, len(input_data), 2):
        company = input_data[i][0]
        sum_of_invoices = input_data[i][2:]
        count_of_invoices = input_data[i + 1][2:]
        combined = [company]
        for sum_inv, count_inv in zip(sum_of_invoices, count_of_invoices):
            combined.append(sum_inv)
            combined.append(count_inv)
        output_data.append(combined)
    return output_data

# Test the function
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['TBD', 'Sum of Invoices', '968,331', '717,397', '683,145', '2,368,873'],
    ['', 'Count of Invoices', '43', '28', '47', '118'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

29_3_3

def transform_data(input_data):
    result = []
    for i in range(0, len(input_data), 2):
        row1 = input_data[i]
        row2 = input_data[i+1]
        merged_row = [row1[0]]
        for j in range(2, len(row1)):
            merged_row.extend([row1[j], row2[j]])
        result.append(merged_row)
    return result

test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'], 
    ['', 'Count of Invoices', '60', '76', '42', '178'], 
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'], 
    ['', 'Count of Invoices', '79', '12', '40', '131'], 
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'], 
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

output = transform_data(test_set)
print(output)

29_4_3

def transform_dataset(test_set):
    transformed_set = []
    for i in range(0, len(test_set), 2):
        entry = [test_set[i][0]]  # Get the company code
        invoices = test_set[i][2:]  # Get the 'Sum of Invoices' data
        counts = test_set[i + 1][2:]  # Get the 'Count of Invoices' data
        combined = [val for pair in zip(invoices, counts) for val in pair]
        transformed_set.append([test_set[i][0]] + combined)
    return transformed_set

# Test with the provided test set
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

result = transform_dataset(test_set)
print(result)

29_5_3

def transform_dataset(test_set):
    transformed_data = []
    for i in range(0, len(test_set), 2):
        company_data = [test_set[i][0]]  # Get the company name
        for j in range(2, len(test_set[i])):
            company_data.append(test_set[i][j])
            company_data.append(test_set[i + 1][j])
        transformed_data.append(company_data)
    return transformed_data

# Test dataset
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

# Transform the test dataset
output_test_set = transform_dataset(test_set)
print(output_test_set)

29_1_4

def transform_data(dataset):
    result = []
    for i in range(0, len(dataset), 2):
        business_name = dataset[i][0]
        sums = dataset[i][2:]
        counts = dataset[i+1][2:]
        merged_record = [business_name]
        for sum_value, count_value in zip(sums, counts):
            merged_record.append(sum_value)
            merged_record.append(count_value)
        result.append(merged_record)
    return result

# Test set
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['XYZ', 'Sum of Invoices', '832,414', '897,949', '712,365', '2,442,728'],
    ['', 'Count of Invoices', '67', '63', '52', '182'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['TBD', 'Sum of Invoices', '968,331', '717,397', '683,145', '2,368,873'],
    ['', 'Count of Invoices', '43', '28', '47', '118'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

# Transform the test set
transformed_test_set = transform_data(test_set)

29_2_4

def transform_dataset(input_data):
    output_data = []
    for i in range(0, len(input_data), 2):
        company = input_data[i][0]
        sum_of_invoices = input_data[i][2:]
        count_of_invoices = input_data[i + 1][2:]
        combined = [company]
        for sum_inv, count_inv in zip(sum_of_invoices, count_of_invoices):
            combined.append(sum_inv)
            combined.append(count_inv)
        output_data.append(combined)
    return output_data

# Test the function
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['TBD', 'Sum of Invoices', '968,331', '717,397', '683,145', '2,368,873'],
    ['', 'Count of Invoices', '43', '28', '47', '118'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

29_3_4

def transform_data(test_set):
    result = []
    for i in range(0, len(test_set), 2):
        row1 = test_set[i]
        row2 = test_set[i+1]
        merged_row = [row1[0]]
        for j in range(2, len(row1)):
            merged_row.extend([row1[j], row2[j]])
        result.append(merged_row)
    return result

test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

output = transform_data(test_set)
print(output)

29_4_4

def transform_dataset(test_set):
    transformed_data = []
    for i in range(0, len(test_set), 2):
        row = [test_set[i][0]]  # Get the company code
        invoices = test_set[i][2:]  # Get sum of invoices
        counts = test_set[i + 1][2:]  # Get count of invoices
        combined = [val for pair in zip(invoices, counts) for val in pair]
        transformed_data.append(row + combined)
    return transformed_data

test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

output = transform_dataset(test_set)
print(output)

29_5_4

def transform_dataset(test_set):
    transformed_data = []
    for i in range(0, len(test_set), 2):
        company_data = [test_set[i][0]]  # Get the company name
        for j in range(2, len(test_set[i])):
            company_data.append(test_set[i][j])
            company_data.append(test_set[i + 1][j])
        transformed_data.append(company_data)
    return transformed_data

# Test dataset
test_set = [
    ['DEF', 'Sum of Invoices', '776,996', '1,532,159', '494,919', '2,804,074'],
    ['', 'Count of Invoices', '60', '76', '42', '178'],
    ['FYI', 'Sum of Invoices', '818,331', '349,399', '552,587', '1,720,317'],
    ['', 'Count of Invoices', '79', '12', '40', '131'],
    ['AFK', 'Sum of Invoices', '454,724', '568,168', '661,672', '1,684,564'],
    ['', 'Count of Invoices', '71', '20', '62', '153']
]

# Transform the test dataset
output_test_set = transform_dataset(test_set)
print(output_test_set)

26_1_0

def transform_input(input_dataset):
    output_dataset = []
    temp_row = []
    for index, element in enumerate(input_dataset):
        temp_row.append(element[0])
        if (index + 1) % 4 == 0:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Test the function
test_set = [
    ['Name2'], ['Age2'], ['Gender2'], ['Birthday2'],
    ['Name3'], ['Age3'], ['Gender3'], ['Birthday3'],
    ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'],
    ['Name666'], ['Age666'], ['Gender666'], ['Birthday666'],
    ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']
]

output = transform_input(test_set)
print(output)

26_2_0

def transform_dataset(test_set):
    return [test_set[i:i+4] for i in range(0, len(test_set), 4)]

test_set = [
    ['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
    ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
    ['Name666'], ['Age666'], ['Gender666'], ['Birthday666'], 
    ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']
]

output = transform_dataset(test_set)
print(output)

26_3_0

def transform_dataset(test_set):
    transformed_dataset = []
    for i in range(0, len(test_set), 4):
        transformed_dataset.append([test_set[i][0], test_set[i+1][0], test_set[i+2][0], test_set[i+3][0]])
    return transformed_dataset

# Test case
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
            ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
            ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

output = transform_dataset(test_set)
print(output)

26_4_0

def transform_dataset(input_data):
    output_data = []
    for i in range(0, len(input_data), 4):
        group = [input_data[i][0], input_data[i+1][0], input_data[i+2][0], input_data[i+3][0]]
        output_data.append(group)
    return output_data

# Test set
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

# Transform test set
transformed_output = transform_dataset(test_set)
print(transformed_output)

26_5_0

def transform_dataset(input_list):
    output_list = []
    
    # Iterate over input_list in steps of 4
    for i in range(0, len(input_list), 4):
        # Group every four items into a list
        merged_entry = [input_list[i][0], input_list[i+1][0], input_list[i+2][0], input_list[i+3][0]]
        output_list.append(merged_entry)
        
    return output_list

# Example usage with the given test dataset
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
            ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
            ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

result = transform_dataset(test_set)
print(result)

26_1_1

def transform_input(input_dataset):
    output_dataset = []
    temp_row = []
    for index, element in enumerate(input_dataset):
        temp_row.append(element[0])
        if (index + 1) % 4 == 0:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Test the function
test_set = [
    ['Name2'], ['Age2'], ['Gender2'], ['Birthday2'],
    ['Name3'], ['Age3'], ['Gender3'], ['Birthday3'],
    ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'],
    ['Name666'], ['Age666'], ['Gender666'], ['Birthday666'],
    ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']
]

output = transform_input(test_set)
print(output)

26_2_1

def transform_dataset(test_set):
    return [test_set[i:i + 4] for i in range(0, len(test_set), 4)]

# Example usage
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
            ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
            ['Name666'], ['Age666'], ['Gender666'], ['Birthday666'], 
            ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

output = transform_dataset(test_set)
print(output)

26_3_1

def transform_dataset(test_set):
    transformed_dataset = [test_set[i:i+4] for i in range(0, len(test_set), 4)]
    return [list(map(lambda x: x[0], group)) for group in transformed_dataset]

# Example usage
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]
output = transform_dataset(test_set)
print(output)

26_4_1

def transform_dataset(input_data):
    output_data = []
    for i in range(0, len(input_data), 4):
        group = [input_data[i][0], input_data[i+1][0], input_data[i+2][0], input_data[i+3][0]]
        output_data.append(group)
    return output_data

# Test set
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

# Transform test set
transformed_output = transform_dataset(test_set)
print(transformed_output)

26_5_1

def transform_dataset(input_list):
    output_list = []
    
    # Iterate over input_list in steps of 4
    for i in range(0, len(input_list), 4):
        # Group every four items into a list
        merged_entry = [input_list[i][0], input_list[i+1][0], input_list[i+2][0], input_list[i+3][0]]
        output_list.append(merged_entry)
        
    return output_list

# Example usage with the given test dataset
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
            ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
            ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

result = transform_dataset(test_set)
print(result)

26_1_2

def transform_input(input_dataset):
    output_dataset = []
    temp_row = []

    for index, element in enumerate(input_dataset):
        temp_row.append(element[0])
        if (index + 1) % 4 == 0:
            output_dataset.append(temp_row)
            temp_row = []

    return output_dataset

# Test the function
test_set = [
    ['Name2'], ['Age2'], ['Gender2'], ['Birthday2'],
    ['Name3'], ['Age3'], ['Gender3'], ['Birthday3'],
    ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'],
    ['Name666'], ['Age666'], ['Gender666'], ['Birthday666'],
    ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']
]

output = transform_input(test_set)
print(output)

26_2_2

def transform_dataset(test_set):
    return [test_set[i:i + 4] for i in range(0, len(test_set), 4)]

# Example usage
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
            ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
            ['Name666'], ['Age666'], ['Gender666'], ['Birthday666'], 
            ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

output = transform_dataset(test_set)
print(output)

26_3_2

def transform_dataset(test_set):
    transformed_dataset = [test_set[i:i+4] for i in range(0, len(test_set), 4)]
    return [list(map(lambda x: x[0], sublist)) for sublist in transformed_dataset]

# Example usage with the given test set
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
            ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
            ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

output_dataset = transform_dataset(test_set)
print(output_dataset)

26_4_2

def transform_dataset(input_data):
    output_data = []
    for i in range(0, len(input_data), 4):
        group = [input_data[i][0], input_data[i+1][0], input_data[i+2][0], input_data[i+3][0]]
        output_data.append(group)
    return output_data

# Test set
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

# Transform test set
transformed_output = transform_dataset(test_set)
print(transformed_output)

26_5_2

def transform_dataset(input_list):
    output_list = []
    for i in range(0, len(input_list), 4):
        output_list.append([input_list[i][0], input_list[i+1][0], input_list[i+2][0], input_list[i+3][0]])
    return output_list

# Test the function with the provided test set
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]
output = transform_dataset(test_set)

26_1_3

def transform_input(input_list):
    output_list = []
    temp_list = []

    for index, element in enumerate(input_list):
        temp_list.append(element[0])
        if (index + 1) % 4 == 0:
            output_list.append(temp_list)
            temp_list = []

    return output_list

# Test the function
test_set = [
    ['Name2'], ['Age2'], ['Gender2'], ['Birthday2'],
    ['Name3'], ['Age3'], ['Gender3'], ['Birthday3'],
    ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'],
    ['Name666'], ['Age666'], ['Gender666'], ['Birthday666'],
    ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']
]

output = transform_input(test_set)
print(output)

26_2_3

def transform_dataset(test_set):
    return [test_set[i:i+4] for i in range(0, len(test_set), 4)]

test_set = [
    ['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
    ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
    ['Name666'], ['Age666'], ['Gender666'], ['Birthday666'], 
    ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']
]

output = transform_dataset(test_set)
print(output)

26_3_3

def transform_dataset(test_set):
    transformed_dataset = []
    for i in range(0, len(test_set), 4):
        transformed_dataset.append([test_set[i][0], test_set[i+1][0], test_set[i+2][0], test_set[i+3][0]])
    return transformed_dataset

# Test case
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
            ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
            ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

output = transform_dataset(test_set)
print(output)

26_4_3

def transform_dataset(input_data):
    output_data = []
    for i in range(0, len(input_data), 4):
        group = [input_data[i][0], input_data[i+1][0], input_data[i+2][0], input_data[i+3][0]]
        output_data.append(group)
    return output_data

# Test set
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

# Transform test set
transformed_output = transform_dataset(test_set)
print(transformed_output)

26_5_3

def transform_dataset(input_list):
    output_list = []
    
    # Iterate over input_list in steps of 4
    for i in range(0, len(input_list), 4):
        # Group every four items into a list
        merged_entry = [input_list[i][0], input_list[i+1][0], input_list[i+2][0], input_list[i+3][0]]
        output_list.append(merged_entry)
        
    return output_list

# Example usage with the given test dataset
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
            ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
            ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

result = transform_dataset(test_set)
print(result)

26_1_4

def transform_input(input_dataset):
    output_dataset = []
    temp_row = []
    for index, element in enumerate(input_dataset):
        temp_row.append(element[0])
        if (index + 1) % 4 == 0:
            output_dataset.append(temp_row)
            temp_row = []
    return output_dataset

# Test the function
test_set = [
    ['Name2'], ['Age2'], ['Gender2'], ['Birthday2'],
    ['Name3'], ['Age3'], ['Gender3'], ['Birthday3'],
    ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'],
    ['Name666'], ['Age666'], ['Gender666'], ['Birthday666'],
    ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']
]

output = transform_input(test_set)
print(output)

26_2_4

def transform_dataset(test_set):
    return [test_set[i:i + 4] for i in range(0, len(test_set), 4)]

# Example usage
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
            ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
            ['Name666'], ['Age666'], ['Gender666'], ['Birthday666'], 
            ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

output = transform_dataset(test_set)
print(output)

26_3_4

def transform_dataset(test_set):
    transformed_dataset = []
    for i in range(0, len(test_set), 4):
        transformed_dataset.append([test_set[i][0], test_set[i+1][0], test_set[i+2][0], test_set[i+3][0]])
    return transformed_dataset

# Test case
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
            ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
            ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

output = transform_dataset(test_set)
print(output)

26_4_4

def transform_dataset(input_data):
    output_data = []
    for i in range(0, len(input_data), 4):
        group = [input_data[i][0], input_data[i+1][0], input_data[i+2][0], input_data[i+3][0]]
        output_data.append(group)
    return output_data

# Test set
test_set = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

# Transform test set
transformed_output = transform_dataset(test_set)
print(transformed_output)

26_5_4

def transform_dataset(input_list):
    output_list = []
    for i in range(0, len(input_list), 4):
        output_list.append([input_list[i][0], input_list[i+1][0], input_list[i+2][0], input_list[i+3][0]])
    return output_list

# Test set
test_input = [['Name2'], ['Age2'], ['Gender2'], ['Birthday2'], 
              ['Name233'], ['Age233'], ['Gender233'], ['Birthday233'], 
              ['Name555'], ['Age555'], ['Gender555'], ['Birthday555']]

# Transform the test set
transformed_output = transform_dataset(test_input)
print(transformed_output)

6_1_0

def transform_data(test_set):
    headers = test_set[0][1:]  # Extract date headers
    result = []
    for row in test_set[2:]:  # Skip the first two rows
        product = row[0]  # Product name
        values = row[1:]   # Values associated with each date
        for date, value in zip(headers, values):
            result.append([date, product, value])
    return result

# Test set
test_set = [
    ['', '9/1/2008', '9/2/2008', '9/3/2008'],
    ['', '', '', ''],
    ['Product2', '3', '5', '10'],
    ['Product3', '0', '1', '4'],
    ['Product4', '1', '0', '0'],
    ['Product5', '3', '8', '7'],
    ['Product6', '9', '2', '1']
]

# Transform the test set
output = transform_data(test_set)
print(output)

6_2_0

def transform_dataset(input_data):
    output_data = []
    dates = input_data[0][1:]

    for row in input_data[2:]:
        product = row[0]
        for date, value in zip(dates, row[1:]):
            output_data.append([date, product, value])

    return output_data

# Test function with the provided test set
test_set = [
    ['', '9/1/2008', '9/2/2008', '9/3/2008'],
    ['', '', '', ''],
    ['Product3', '0', '1', '4'],
    ['Product4', '1', '0', '0'],
    ['Product5', '3', '8', '7'],
    ['Product6', '9', '2', '1']
]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

6_3_0

def transform_dataset(input_data):
    headers = input_data[0][1:]
    result = []
    for row in input_data[2:]:
        product = row[0]
        for i, value in enumerate(row[1:]):
            result.append([headers[i], product, value])
    return result

test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product4', '1', '0', '0'], ['Product5', '3', '8', '7'], ['Product6', '9', '2', '1']]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

6_4_0

def transform_dataset(input_data):
    output_data = []
    dates = input_data[0][1:]
    for row in input_data[2:]:
        product = row[0]
        for index, value in enumerate(row[1:]):
            entry = [dates[index], product, value]
            output_data.append(entry)
    return output_data

test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product5', '3', '8', '7'], ['Product6', '9', '2', '1']]
transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

6_5_0

def transform_dataset(input_data):
    transformed_data = []
    
    headers = input_data[0][1:]
    for row in input_data[2:]:
        product_name = row[0]
        for i, value in enumerate(row[1:]):
            transformed_data.append([headers[i], product_name, value])
    
    return transformed_data

# Example test set transformation
test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product6', '9', '2', '1']]
output_dataset = transform_dataset(test_set)
print(output_dataset)

6_1_1

def transform_data(test_set):
    headers = test_set[0][1:]  # Extract date headers
    result = []
    for row in test_set[2:]:  # Skip the first two rows
        product = row[0]  # Product name
        values = row[1:]  # Values for each date
        for date, value in zip(headers, values):
            result.append([date, product, value])
    return result

# Example usage
test_set = [
    ['', '9/1/2008', '9/2/2008', '9/3/2008'],
    ['', '', '', ''],
    ['Product2', '3', '5', '10'],
    ['Product3', '0', '1', '4'],
    ['Product4', '1', '0', '0'],
    ['Product5', '3', '8', '7'],
    ['Product6', '9', '2', '1']
]

output = transform_data(test_set)
print(output)

6_2_1

def transform_dataset(input_data):
    output_data = []
    dates = input_data[0][1:]

    for row in input_data[2:]:
        product = row[0]
        for date, value in zip(dates, row[1:]):
            output_data.append([date, product, value])

    return output_data

# Test function with the provided test set
test_set = [
    ['', '9/1/2008', '9/2/2008', '9/3/2008'],
    ['', '', '', ''],
    ['Product3', '0', '1', '4'],
    ['Product4', '1', '0', '0'],
    ['Product5', '3', '8', '7'],
    ['Product6', '9', '2', '1']
]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

6_3_1

def transform_dataset(input_data):
    headers = input_data[0][1:]
    result = []
    for row in input_data[2:]:
        product = row[0]
        for i, value in enumerate(row[1:]):
            result.append([headers[i], product, value])
    return result

test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product4', '1', '0', '0'], ['Product5', '3', '8', '7'], ['Product6', '9', '2', '1']]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

6_4_1

def transform_dataset(input_data):
    headers = input_data[0][1:]
    products_data = input_data[2:]
    
    transformed_data = []
    
    for product_row in products_data:
        product_name = product_row[0]
        for i in range(1, len(product_row)):
            date = headers[i - 1]
            value = product_row[i]
            transformed_data.append([date, product_name, value])
            
    return transformed_data

test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product5', '3', '8', '7'], ['Product6', '9', '2', '1']]
output = transform_dataset(test_set)
print(output)

6_5_1

def transform_dataset(input_data):
    headers = input_data[0][1:]
    transformed_data = []
    
    for row in input_data[2:]:
        product_name = row[0]
        for i, value in enumerate(row[1:]):
            transformed_data.append([headers[i], product_name, value])
    
    return transformed_data

# Example test set transformation
test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product6', '9', '2', '1']]
output_dataset = transform_dataset(test_set)
print(output_dataset)

6_1_2

def transform_data(test_set):
    headers = test_set[0][1:]  # Extract date headers
    result = []
    for row in test_set[2:]:  # Skip the first two rows
        product = row[0]  # Product name
        values = row[1:]  # Values for each date
        for date, value in zip(headers, values):
            result.append([date, product, value])
    return result

# Example usage
test_set = [
    ['', '9/1/2008', '9/2/2008', '9/3/2008'],
    ['', '', '', ''],
    ['Product2', '3', '5', '10'],
    ['Product3', '0', '1', '4'],
    ['Product4', '1', '0', '0'],
    ['Product5', '3', '8', '7'],
    ['Product6', '9', '2', '1']
]

output = transform_data(test_set)
print(output)

6_2_2

def transform_dataset(input_data):
    output_data = []
    dates = input_data[0][1:]

    for row in input_data[2:]:
        product = row[0]
        for date, value in zip(dates, row[1:]):
            output_data.append([date, product, value])

    return output_data

# Test function with the provided test set
test_set = [
    ['', '9/1/2008', '9/2/2008', '9/3/2008'],
    ['', '', '', ''],
    ['Product3', '0', '1', '4'],
    ['Product4', '1', '0', '0'],
    ['Product5', '3', '8', '7'],
    ['Product6', '9', '2', '1']
]

transformed_test = transform_dataset(test_set)
transformed_test

6_3_2

def transform_dataset(input_data):
    headers = input_data[0][1:]
    result = []
    for row in input_data[2:]:
        product = row[0]
        for i, value in enumerate(row[1:]):
            result.append([headers[i], product, value])
    return result

test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product4', '1', '0', '0'], ['Product5', '3', '8', '7'], ['Product6', '9', '2', '1']]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

6_4_2

def transform_dataset(input_data):
    headers = input_data[0][1:]
    products_data = input_data[2:]
    
    transformed_data = []
    
    for product_row in products_data:
        product_name = product_row[0]
        for i in range(1, len(product_row)):
            date = headers[i - 1]
            value = product_row[i]
            transformed_data.append([date, product_name, value])
            
    return transformed_data

test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product5', '3', '8', '7'], ['Product6', '9', '2', '1']]
output = transform_dataset(test_set)
print(output)

6_5_2

def transform_dataset(input_data):
    transformed_data = []
    
    headers = input_data[0][1:]
    for row in input_data[2:]:
        product_name = row[0]
        for i, value in enumerate(row[1:]):
            transformed_data.append([headers[i], product_name, value])
    
    return transformed_data

# Example test set transformation
test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product6', '9', '2', '1']]
output_dataset = transform_dataset(test_set)
print(output_dataset)

6_1_3

def transform_data(test_set):
    result = []
    headers = test_set[0][1:]
    for row in test_set[2:]:
        product = row[0]
        for i, value in enumerate(row[1:], start=0):
            result.append([headers[i], product, value])
    return result

# Test the function with the provided test set
test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], 
            ['Product2', '3', '5', '10'], 
            ['Product3', '0', '1', '4'], 
            ['Product4', '1', '0', '0'], 
            ['Product5', '3', '8', '7'], 
            ['Product6', '9', '2', '1']]

transformed_data = transform_data(test_set)
for entry in transformed_data:
    print(entry)

6_2_3

def transform_dataset(input_data):
    output_data = []
    dates = input_data[0][1:]

    for row in input_data[2:]:
        product = row[0]
        for date, value in zip(dates, row[1:]):
            output_data.append([date, product, value])

    return output_data

# Test function with the provided test set
test_set = [
    ['', '9/1/2008', '9/2/2008', '9/3/2008'],
    ['', '', '', ''],
    ['Product3', '0', '1', '4'],
    ['Product4', '1', '0', '0'],
    ['Product5', '3', '8', '7'],
    ['Product6', '9', '2', '1']
]

transformed_test = transform_dataset(test_set)
transformed_test

6_3_3

def transform_dataset(input_data):
    headers = input_data[0][1:]
    result = []
    for row in input_data[2:]:
        product = row[0]
        for i, value in enumerate(row[1:]):
            result.append([headers[i], product, value])
    return result

test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product4', '1', '0', '0'], ['Product5', '3', '8', '7'], ['Product6', '9', '2', '1']]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

6_4_3

def transform_dataset(input_data):
    output_data = []
    dates = input_data[0][1:]
    for row in input_data[2:]:
        product = row[0]
        for index, value in enumerate(row[1:]):
            entry = [dates[index], product, value]
            output_data.append(entry)
    return output_data

test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product5', '3', '8', '7'], ['Product6', '9', '2', '1']]
transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

6_5_3

def transform_dataset(input_data):
    transformed_data = []
    
    headers = input_data[0]
    
    for row in input_data[2:]:
        product_name = row[0]
        for i in range(1, len(headers)):
            date = headers[i]
            value = row[i]
            transformed_data.append([date, product_name, value])
    
    return transformed_data

# Example usage:
test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product6', '9', '2', '1']]
output = transform_dataset(test_set)

6_1_4

def transform_data(test_set):
    headers = test_set[0][1:]  # Extract date headers
    result = []
    for row in test_set[2:]:  # Skip the first two rows
        product = row[0]  # Product name
        values = row[1:]  # Values for each date
        for date, value in zip(headers, values):
            result.append([date, product, value])
    return result

# Example usage
test_set = [
    ['', '9/1/2008', '9/2/2008', '9/3/2008'],
    ['', '', '', ''],
    ['Product2', '3', '5', '10'],
    ['Product3', '0', '1', '4'],
    ['Product4', '1', '0', '0'],
    ['Product5', '3', '8', '7'],
    ['Product6', '9', '2', '1']
]

output = transform_data(test_set)
print(output)

6_2_4

def transform_dataset(input_data):
    output_data = []
    dates = input_data[0][1:]

    for row in input_data[2:]:
        product = row[0]
        for date, value in zip(dates, row[1:]):
            output_data.append([date, product, value])

    return output_data

# Test function with the provided test set
test_set = [
    ['', '9/1/2008', '9/2/2008', '9/3/2008'],
    ['', '', '', ''],
    ['Product3', '0', '1', '4'],
    ['Product4', '1', '0', '0'],
    ['Product5', '3', '8', '7'],
    ['Product6', '9', '2', '1']
]

transformed_test = transform_dataset(test_set)
transformed_test

6_3_4

def transform_dataset(input_data):
    headers = input_data[0][1:]
    result = []
    for row in input_data[2:]:
        product = row[0]
        for i, value in enumerate(row[1:]):
            result.append([headers[i], product, value])
    return result

test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product4', '1', '0', '0'], ['Product5', '3', '8', '7'], ['Product6', '9', '2', '1']]

transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

6_4_4

def transform_dataset(input_data):
    output_data = []
    dates = input_data[0][1:]
    for row in input_data[2:]:
        product = row[0]
        for index, value in enumerate(row[1:]):
            entry = [dates[index], product, value]
            output_data.append(entry)
    return output_data

test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product5', '3', '8', '7'], ['Product6', '9', '2', '1']]
output = transform_dataset(test_set)
print(output)

6_5_4

def transform_dataset(test_set):
    transformed_data = []
    
    headers = test_set[0]
    products = test_set[2:]
    
    for product in products:
        product_name = product[0]
        for i in range(1, len(headers)):
            date = headers[i]
            value = product[i]
            transformed_data.append([date, product_name, value])
    
    return transformed_data

# Example test set
test_set = [['', '9/1/2008', '9/2/2008', '9/3/2008'], ['', '', '', ''], ['Product6', '9', '2', '1']]
output = transform_dataset(test_set)
print(output)

crime_data_wrangler_1_0

def transform_dataset(input_data):
    output_data = []
    current_state = None
    years = []
    values = []
    
    for entry in input_data:
        if entry == ['', '']:
            if current_state is not None and years and values:
                output_data.append(['', *years])
                output_data.append([current_state, *values])
            current_state = None
            years = []
            values = []
        elif 'Reported crime in' in entry[0]:
            current_state = entry[0].replace('Reported crime in ', '')
        else:
            years.append(entry[0])
            values.append(entry[1])
    
    if current_state is not None and years and values:
        output_data.append(['', *years])
        output_data.append([current_state, *values])
    
    return output_data

# Test the function
test_input = [['Reported crime in Alabama', ''], ['', ''], ['2004', '4029.3'], ['2005', '3900'], ['2006', '3937'], ['2007', '3974.9'], ['2008', '4081.9'], ['', ''], ['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008...

transformed_output = transform_dataset(test_input)
for row in transformed_output:
    print(row)

crime_data_wrangler_2_0

def transform_data(input_data):
    output_data = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_row = []
    
    for entry in input_data:
        if 'Reported crime' in entry[0]:
            if current_state:
                output_data.append(current_row)
            current_state = entry[0].replace('Reported crime in ', '')
            current_row = [current_state]
        elif entry[0].isdigit():
            current_row.append(entry[1])
    
    # Append the last state data
    if current_state:
        output_data.append(current_row)

    return output_data


test_set = [['Reported crime in Alabama', ''], ['', ''], ['2004', '4029.3'], ['2005', '3900'], ['2006', '3937'], ['2007', '3974.9'], ['2008', '4081.9'], ['', ''], ['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['...

output = transform_data(test_set)

crime_data_wrangler_3_0

def transform_data(test_set):
    result = [['', '2004', '2005', '2006', '2007', '2008']]
    state_name = None
    crime_data = []

    for entry in test_set:
        if entry[0].startswith('Reported crime in '):
            if state_name:
                result.append([state_name] + crime_data)
            state_name = entry[0].replace('Reported crime in ', '')
            crime_data = []
        elif entry[0].isdigit():
            crime_data.append(entry[1])

    if state_name:
        result.append([state_name] + crime_data)

    return result

test_set = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported crime in California', ''], ['', ''], ['2004', '3423.9'], ['200...

output = transform_data(test_set)

crime_data_wrangler_4_0

def transform_crime_data(data):
    transformed_data = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_row = []

    for row in data:
        if row[0].startswith('Reported crime in'):
            if current_state:
                transformed_data.append(current_row)
            current_state = row[0].replace('Reported crime in ', '')
            current_row = [current_state]
        elif row[0].isdigit():
            current_row.append(row[1])

    if current_state:
        transformed_data.append(current_row)
    
    return transformed_data

# Test set
test_set = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported crime in California', ''], ['', ''], ['2004', '3423.9'], ['2005', '3321'], ['2006', '3175.2'], ['2007', '3032.6'], ['2008', '2940.3'], ['', ''], ['Reported crime in Colorado', ''], ['', ''], ['2004', '3918.5'], ['2005', '4041'], ['2006', '3441.8'], ['2007', '2991.3'], ['2008', '2856.7'], ['', ''], ['Reported crime in Connecticut', ''], ['', ''], ['2004', '2684.9'], ['2005', '2579'], ['2006', '2575'], ['2007', '2470.6'], ['2008', '2490.8'], ['', ''], ['Reported crime in Delaware', ''], ['', ''], ['2004', '3283.6'], ['2005', '3118'], ['2006', '3474.5'], ['2007', '3427.1'], ['2008', '3594.7'], ['', ''], ['Reported crime in Florida', ''], ['', ''], ['2004', '4182.5'], ['2005', '4013'], ['2006', '3986.2'], ['2007', '4088.8'], ['2008', '4140.6'], ['', ''], ['Reported crime in Georgia', ''], ['', ''], ['2004', '4223.5'], ['2005', '4145'], ['2006', '3928.8'], ['2007', '3893.1'], ['2008', '3996.6'], ['', ''], ['Reported crime in Hawaii', ''], ['', ''], ['2004', '4795.5'], ['2005', '4800'], ['2006', '4219.9'], ['2007', '4119.3'], ['2008', '3566.5'], ['', ''], ['Reported crime in Idaho', ''], ['', ''], ['2004', '2781'], ['2005', '2697'], ['2006', '2386.9'], ['2007', '2264.2'], ['2008', '2116.5'], ['', ''], ['Reported crime in Illinois', ''], ['', ''], ['2004', '3174.1'], ['2005', '3092'], ['2006', '3019.6'], ['2007', '2935.8'], ['2008', '2932.6'], ['', ''], ['Reported crime in Indiana', ''], ['', ''], ['2004', '3403.6'], ['2005', '3460'], ['2006', '3464.3'], ['2007', '3386.5'], ['2008', '3339.6'], ['', ''], ['Reported crime in Iowa', ''], ['', ''], ['2004', '2904.8'], ['2005', '2845'], ['2006', '2870.3'], ['2007', '2648.6'], ['2008', '2440.5'], ['', ''], ['Reported crime in Kansas', ''], ['', ''], ['2004', '4015.5'], ['2005', '3806'], ['2006', '3858.5'], ['2007', '3693.8'], ['2008', '3397'], ['', ''], ['Reported crime in Kentucky', ''], ['', ''], ['2004', '2540.2'], ['2005', '2531'], ['2006', '2621.9'], ['2007', '2524.6'], ['2008', '2677.1'], ['', ''], ['Reported crime in Louisiana', ''], ['', ''], ['2004', '4419.1'], ['2005', '3696'], ['2006', '4088.5'], ['2007', '4196.1'], ['2008', '3880.2'], ['', ''], ['Reported crime in Maine', ''], ['', ''], ['2004', '2413.7'], ['2005', '2419'], ['2006', '2546.1'], ['2007', '2448.3'], ['2008', '2463.7'], ['', ''], ['Reported crime in Maryland', ''], ['', ''], ['2004', '3640.7'], ['2005', '3551'], ['2006', '3481.2'], ['2007', '3431.5'], ['2008', '3516'], ['', ''], ['Reported crime in Massachusetts', ''], ['', ''], ['2004', '2468.2'], ['2005', '2358'], ['2006', '2396'], ['2007', '2399.2'], ['2008', '2402'], ['', ''], ['Reported crime in Michigan', ''], ['', ''], ['2004', '3066.1'], ['2005', '3098'], ['2006', '3226'], ['2007', '3057.8'], ['2008', '2945.7'], ['', ''], ['Reported crime in Minnesota', ''], ['', ''], ['2004', '3041.6'], ['2005', '3088'], ['2006', '3088.8'], ['2007', '3045'], ['2008', '2858.1'], ['', ''], ['Reported crime in Mississippi', ''], ['', ''], ['2004', '3481.1'], ['2005', '3274'], ['2006', '3213'], ['2007', '3137.8'], ['2008', '2941.7'], ['', ''], ['Reported crime in Missouri', ''], ['', ''], ['2004', '3900.1'], ['2005', '3929'], ['2006', '3828.4'], ['2007', '3828.2'], ['2008', '3663.6'], ['', ''], ['Reported crime in Montana', ''], ['', ''], ['2004', '2936.1'], ['2005', '3146'], ['2006', '2863.4'], ['2007', '2863.6'], ['2008', '2720.9'], ['', ''], ['Reported crime in Nebraska', ''], ['', ''], ['2004', '3519.6'], ['2005', '3432'], ['2006', '3364.9'], ['2007', '3142.8'], ['2008', '2878.3'], ['', ''], ['Reported crime in Nevada', ''], ['', ''], ['2004', '4210'], ['2005', '4246'], ['2006', '4099.6'], ['2007', '3785.1'], ['2008', '3456.4'], ['', ''], ['Reported crime in New Hampshire', ''], ['', ''], ['2004', '2051.9'], ['2005', '1839'], ['2006', '2061.8'], ['2007', '1968.6'], ['2008', '2132.1'], ['', ''], ['Reported crime in New Mexico', ''], ['', ''], ['2004', '4198.4'], ['2005', '4132'], ['2006', '3947.5'], ['2007', '3846.7'], ['2008', '3817.4'], ['', ''], ['Reported crime in New York', ''], ['', ''], ['2004', '2192.5'], ['2005', '2102'], ['2006', '2063.2'], ['2007', '1992.1'], ['2008', '1993.7'], ['', ''], ['Reported crime in North Dakota', ''], ['', ''], ['2004', '1963.4'], ['2005', '2025'], ['2006', '2088.6'], ['2007', '1996.8'], ['2008', '2016.3'], ['', ''], ['Reported crime in Ohio', ''], ['', ''], ['2004', '3662.3'], ['2005', '3668'], ['2006', '3716.2'], ['2007', '3461.6'], ['2008', '3419.2'], ['', ''], ['Reported crime in Oklahoma', ''], ['', ''], ['2004', '4242.1'], ['2005', '4047'], ['2006', '3625'], ['2007', '3549.8'], ['2008', '3456.6'], ['', ''], ['Reported crime in Oregon', ''], ['', ''], ['2004', '4635.4'], ['2005', '4402'], ['2006', '3719.1'], ['2007', '3530.1'], ['2008', '3299.2'], ['', ''], ['Reported crime in Pennsylvania', ''], ['', ''], ['2004', '2417.3'], ['2005', '2422'], ['2006', '2451'], ['2007', '2364.4'], ['2008', '2412.4'], ['', ''], ['Reported crime in Rhode Island', ''], ['', ''], ['2004', '2886'], ['2005', '2728'], ['2006', '2614.6'], ['2007', '2602.2'], ['2008', '2845'], ['', ''], ['Reported crime in South Carolina', ''], ['', ''], ['2004', '4536.9'], ['2005', '4370'], ['2006', '4277.1'], ['2007', '4282.6'], ['2008', '4241.2'], ['', ''], ['Reported crime in South Dakota', ''], ['', ''], ['2004', '1931.6'], ['2005', '1767'], ['2006', '1811.1'], ['2007', '1774'], ['2008', '1706.1'], ['', ''], ['Reported crime in Tennessee', ''], ['', ''], ['2004', '4326.8'], ['2005', '4300'], ['2006', '4137.7'], ['2007', '4092.2'], ['2008', '4048.3'], ['', ''], ['Reported crime in Texas', ''], ['', ''], ['2004', '4497.7'], ['2005', '4319'], ['2006', '4084.2'], ['2007', '4121.6'], ['2008', '3987'], ['', ''], ['Reported crime in Utah', ''], ['', ''], ['2004', '4038.6'], ['2005', '3837'], ['2006', '3505.3'], ['2007', '3510.1'], ['2008', '3374'], ['', ''], ['Reported crime in Vermont', ''], ['', ''], ['2004', '2343.6'], ['2005', '2370'], ['2006', '2368'], ['2007', '2339'], ['2008', '2559.8'], ['', ''], ['Reported crime in Virginia', ''], ['', ''], ['2004', '2678.2'], ['2005', '2649'], ['2006', '2479.6'], ['2007', '2480'], ['2008', '2531.8'], ['', ''], ['Reported crime in Washington', ''], ['', ''], ['2004', '4846.7'], ['2005', '4890'], ['2006', '4483.3'], ['2007', '4026'], ['2008', '3785'], ['', ''], ['Reported crime in West Virginia', ''], ['', ''], ['2004', '2555.8'], ['2005', '2633'], ['2006', '2639.9'], ['2007', '2543.6'], ['2008', '2554.4'], ['', ''], ['Reported crime in Wisconsin', ''], ['', ''], ['2004', '2665.7'], ['2005', '2669'], ['2006', '2820'], ['2007', '2842.8'], ['2008', '2761.1'], ['', ''], ['Reported crime in Wyoming', ''], ['', ''], ['2004', '3338.5'], ['2005', '3158'], ['2006', '2989.1'], ['2007', '2883.2'], ['2008', '2724.2']]
transformed_test_set = transform_crime_data(test_set)
print(transformed_test_set)

crime_data_wrangler_5_0

def transform_data(input_data):
    result = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_data = []

    for row in input_data:
        if row[0].startswith('Reported crime'):
            if current_state and current_data:
                result.append([current_state] + current_data)
            current_state = row[0].split(' in ')[1]
            current_data = []
        elif row[0].isdigit():
            current_data.append(row[1])

    if current_state and current_data:
        result.append([current_state] + current_data)

    return result

# Example use:
test_data = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported crime in California', ''], ['', ''], ['2004', '3423.9'], ['2005', '3321'], ['2006', '3175.2'], ['2007', '3032.6'], ['2008', '2940.3'], ['', ''], ['Reported crime in Colorado', ''], ['', ''], ['2004', '3918.5'], ['2005', '4041'], ['2006', '3441.8'], ['2007', '2991.3'], ['2008', '2856.7'], ['', ''], ['Reported crime in Connecticut', ''], ['', ''], ['2004', '2684.9'], ['2005', '2579'], ['2006', '2575'], ['2007', '2470.6'], ['2008', '2490.8'], ['', ''], ['Reported crime in Delaware', ''], ['', ''], ['2004', '3283.6'], ['2005', '3118'], ['2006', '3474.5'], ['2007', '3427.1'], ['2008', '3594.7'], ['', ''], ['Reported crime in Florida', ''], ['', ''], ['2004', '4182.5'], ['2005', '4013'], ['2006', '3986.2'], ['2007', '4088.8'], ['2008', '4140.6'], ['', ''], ['Reported crime in Georgia', ''], ['', ''], ['2004', '4223.5'], ['2005', '4145'], ['2006', '3928.8'], ['2007', '3893.1'], ['2008', '3996.6'], ['', ''], ['Reported crime in Hawaii', ''], ['', ''], ['2004', '4795.5'], ['2005', '4800'], ['2006', '4219.9'], ['2007', '4119.3'], ['2008', '3566.5'], ['', ''], ['Reported crime in Idaho', ''], ['', ''], ['2004', '2781'], ['2005', '2697'], ['2006', '2386.9'], ['2007', '2264.2'], ['2008', '2116.5'], ['', ''], ['Reported crime in Illinois', ''], ['', ''], ['2004', '3174.1'], ['2005', '3092'], ['2006', '3019.6'], ['2007', '2935.8'], ['2008', '2932.6'], ['', ''], ['Reported crime in Indiana', ''], ['', ''], ['2004', '3403.6'], ['2005', '3460'], ['2006', '3464.3'], ['2007', '3386.5'], ['2008', '3339.6'], ['', ''], ['Reported crime in Iowa', ''], ['', ''], ['2004', '2904.8'], ['2005', '2845'], ['2006', '2870.3'], ['2007', '2648.6'], ['2008', '2440.5'], ['', ''], ['Reported crime in Kansas', ''], ['', ''], ['2004', '4015.5'], ['2005', '3806'], ['2006', '3858.5'], ['2007', '3693.8'], ['2008', '3397'], ['', ''], ['Reported crime in Kentucky', ''], ['', ''], ['2004', '2540.2'], ['2005', '2531'], ['2006', '2621.9'], ['2007', '2524.6'], ['2008', '2677.1'], ['', ''], ['Reported crime in Louisiana', ''], ['', ''], ['2004', '4419.1'], ['2005', '3696'], ['2006', '4088.5'], ['2007', '4196.1'], ['2008', '3880.2'], ['', ''], ['Reported crime in Maine', ''], ['', ''], ['2004', '2413.7'], ['2005', '2419'], ['2006', '2546.1'], ['2007', '2448.3'], ['2008', '2463.7'], ['', ''], ['Reported crime in Maryland', ''], ['', ''], ['2004', '3640.7'], ['2005', '3551'], ['2006', '3481.2'], ['2007', '3431.5'], ['2008', '3516'], ['', ''], ['Reported crime in Massachusetts', ''], ['', ''], ['2004', '2468.2'], ['2005', '2358'], ['2006', '2396'], ['2007', '2399.2'], ['2008', '2402'], ['', ''], ['Reported crime in Michigan', ''], ['', ''], ['2004', '3066.1'], ['2005', '3098'], ['2006', '3226'], ['2007', '3057.8'], ['2008', '2945.7'], ['', ''], ['Reported crime in Minnesota', ''], ['', ''], ['2004', '3041.6'], ['2005', '3088'], ['2006', '3088.8'], ['2007', '3045'], ['2008', '2858.1'], ['', ''], ['Reported crime in Mississippi', ''], ['', ''], ['2004', '3481.1'], ['2005', '3274'], ['2006', '3213'], ['2007', '3137.8'], ['2008', '2941.7'], ['', ''], ['Reported crime in Missouri', ''], ['', ''], ['2004', '3900.1'], ['2005', '3929'], ['2006', '3828.4'], ['2007', '3828.2'], ['2008', '3663.6'], ['', ''], ['Reported crime in Montana', ''], ['', ''], ['2004', '2936.1'], ['2005', '3146'], ['2006', '2863.4'], ['2007', '2863.6'], ['2008', '2720.9'], ['', ''], ['Reported crime in Nebraska', ''], ['', ''], ['2004', '3519.6'], ['2005', '3432'], ['2006', '3364.9'], ['2007', '3142.8'], ['2008', '2878.3'], ['', ''], ['Reported crime in Nevada', ''], ['', ''], ['2004', '4210'], ['2005', '4246'], ['2006', '4099.6'], ['2007', '3785.1'], ['2008', '3456.4'], ['', ''], ['Reported crime in New Hampshire', ''], ['', ''], ['2004', '2051.9'], ['2005', '1839'], ['2006', '2061.8'], ['2007', '1968.6'], ['2008', '2132.1'], ['', ''], ['Reported crime in New Mexico', ''], ['', ''], ['2004', '4198.4'], ['2005', '4132'], ['2006', '3947.5'], ['2007', '3846.7'], ['2008', '3817.4'], ['', ''], ['Reported crime in New York', ''], ['', ''], ['2004', '2192.5'], ['2005', '2102'], ['2006', '2063.2'], ['2007', '1992.1'], ['2008', '1993.7'], ['', ''], ['Reported crime in North Dakota', ''], ['', ''], ['2004', '1963.4'], ['2005', '2025'], ['2006', '2088.6'], ['2007', '1996.8'], ['2008', '2016.3'], ['', ''], ['Reported crime in Oklahoma', ''], ['', ''], ['2004', '4242.1'], ['2005', '4047'], ['2006', '3625'], ['2007', '3549.8'], ['2008', '3456.6'], ['', ''], ['Reported crime in Oregon', ''], ['', ''], ['2004', '4635.4'], ['2005', '4402'], ['2006', '3719.1'], ['2007', '3530.1'], ['2008', '3299.2'], ['', ''], ['Reported crime in Pennsylvania', ''], ['', ''], ['2004', '2417.3'], ['2005', '2422'], ['2006', '2451'], ['2007', '2364.4'], ['2008', '2412.4'], ['', ''], ['Reported crime in Rhode Island', ''], ['', ''], ['2004', '2886'], ['2005', '2728'], ['2006', '2614.6'], ['2007', '2602.2'], ['2008', '2845'], ['', ''], ['Reported crime in South Carolina', ''], ['', ''], ['2004', '4536.9'], ['2005', '4370'], ['2006', '4277.1'], ['2007', '4282.6'], ['2008', '4241.2'], ['', ''], ['Reported crime in South Dakota', ''], ['', ''], ['2004', '1931.6'], ['2005', '1767'], ['2006', '1811.1'], ['2007', '1774'], ['2008', '1706.1'], ['', ''], ['Reported crime in Tennessee', ''], ['', ''], ['2004', '4326.8'], ['2005', '4300'], ['2006', '4137.7'], ['2007', '4092.2'], ['2008', '4048.3'], ['', ''], ['Reported crime in Texas', ''], ['', ''], ['2004', '4497.7'], ['2005', '4319'], ['2006', '4084.2'], ['2007', '4121.6'], ['2008', '3987'], ['', ''], ['Reported crime in Utah', ''], ['', ''], ['2004', '4038.6'], ['2005', '3837'], ['2006', '3505.3'], ['2007', '3510.1'], ['2008', '3374'], ['', ''], ['Reported crime in Vermont', ''], ['', ''], ['2004', '2343.6'], ['2005', '2370'], ['2006', '2368'], ['2007', '2339'], ['2008', '2559.8'], ['', ''], ['Reported crime in Virginia', ''], ['', ''], ['2004', '2678.2'], ['2005', '2649'], ['2006', '2479.6'], ['2007', '2480'], ['2008', '2531.8'], ['', ''], ['Reported crime in Washington', ''], ['', ''], ['2004', '4846.7'], ['2005', '4890'], ['2006', '4483.3'], ['2007', '4026'], ['2008', '3785'], ['', ''], ['Reported crime in West Virginia', ''], ['', ''], ['2004', '2555.8'], ['2005', '2633'], ['2006', '2639.9'], ['2007', '2543.6'], ['2008', '2554.4'], ['', ''], ['Reported crime in Wisconsin', ''], ['', ''], ['2004', '2665.7'], ['2005', '2669'], ['2006', '2820'], ['2007', '2842.8'], ['2008', '2761.1'], ['', ''], ['Reported crime in Wyoming', ''], ['', ''], ['2004', '3338.5'], ['2005', '3158'], ['2006', '2989.1'], ['2007', '2883.2'], ['2008', '2724.2']]
print(transform_data(test_data))

crime_data_wrangler_1_1

def transform_dataset(input_data):
    output_data = []
    current_state = None
    years = []
    values = []
    
    for entry in input_data:
        if entry[0].startswith('Reported crime in'):
            if current_state is not None:
                output_data.append([current_state] + values)
            current_state = entry[0].replace('Reported crime in ', '')
            years = []
            values = []
        elif entry[0].isdigit():
            years.append(entry[0])
            values.append(entry[1])
    
    if current_state is not None:
        output_data.append([current_state] + values)

    # Add header with years
    header = [''] + years
    output_data.insert(0, header)
        
    return output_data

test_set = [['Reported crime in Alabama', ''], ['', ''], ['2004', '4029.3'], ['2005', '3900'], ['2006', '3937'], ['2007', '3974.9'], ['2008', '4081.9'], ['', ''], ['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported...

output_dataset = transform_dataset(test_set)

crime_data_wrangler_2_1

def transform_data(input_data):
    output_data = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_row = []
    
    for entry in input_data:
        if 'Reported crime' in entry[0]:
            if current_state:
                output_data.append(current_row)
            current_state = entry[0].replace('Reported crime in ', '')
            current_row = [current_state]
        elif entry[0].isdigit():
            current_row.append(entry[1])
    
    # Append the last state data
    if current_state:
        output_data.append(current_row)

    return output_data


test_set = [['Reported crime in Alabama', ''], ['', ''], ['2004', '4029.3'], ['2005', '3900'], ['2006', '3937'], ['2007', '3974.9'], ['2008', '4081.9'], ['', ''], ['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['...

output = transform_data(test_set)

crime_data_wrangler_3_1

def transform_data(test_set):
    result = [['', '2004', '2005', '2006', '2007', '2008']]
    state_name = None
    crime_data = []

    for entry in test_set:
        if entry[1] == '':
            if state_name and crime_data:
                result.append([state_name] + crime_data)
            state_name = entry[0].replace('Reported crime in ', '') if entry[0] else None
            crime_data = []
        else:
            crime_data.append(entry[1])

    if state_name and crime_data:
        result.append([state_name] + crime_data)

    return result

# Test the function with the provided dataset
test_set = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported crime in California', ''], ['', '...

output = transform_data(test_set)

crime_data_wrangler_4_1

def transform_crime_data(data):
    transformed_data = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_row = []

    for row in data:
        if row[0].startswith('Reported crime in'):
            if current_state:
                transformed_data.append(current_row)
            current_state = row[0].replace('Reported crime in ', '')
            current_row = [current_state]
        elif row[0].isdigit():
            current_row.append(row[1])

    if current_state:
        transformed_data.append(current_row)
    
    return transformed_data

# Test the function with the test set data
test_set = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported crime in California', ''], ['', ''], ['2004', '3423.9'], ['2005', '3321'], ['2006', '3175.2'], ['2007', '3032.6'], ['2008', '2940.3'], ['', ''], ['Reported crime in Colorado', ''], ['', ''], ['2004', '3918.5'], ['2005', '4041'], ['2006', '3441.8'], ['2007', '2991.3'], ['2008', '2856.7...

result = transform_crime_data(test_set)
for row in result:
    print(row)

crime_data_wrangler_5_1

def transform_data(input_data):
    result = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = ''
    
    for row in input_data:
        if 'Reported crime in' in row[0]:
            current_state = row[0].replace('Reported crime in ', '')
        elif row[0] == '':
            continue
        else:
            if len(result[-1]) == 0 or result[-1][0] != current_state:
                result.append([current_state])
            result[-1].append(row[1])
    
    return result

# Example usage with test dataset
test_set = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported crime in California', ''], ['', ''], ['2004', '3423.9'], ['2005', '3321'], ['2006', '3175.2'], ['2007', '3032.6'], ['2008', '2940.3'], ['', ''], ['Reported crime in Colorado', ''], ['', ''], ['2004', '3918.5'], ['2005', '4041'], ['2006', '3441.8'], ['2007', '2991.3'], ['2008', '2856.7'], ['', ''], ['Reported crime in Connecticut', ''], ['', ''], ['2004', '2684.9'], ['2005', '2579'], ['2006', '2575'], ['2007', '2470.6'], ['2008', '2490.8'], ['', ''], ['Reported crime in Delaware', ''], ['', ''], ['2004', '3283.6'], ['2005', '3118'], ['2006', '3474.5'], ['2007', '3427.1'], ['2008', '3594.7'], ['', ''], ['Reported crime in Florida', ''], ['', ''], ['2004', '4182.5'], ['2005', '4013'], ['2006', '3986.2'], ['2007', '4088.8'], ['2008', '4140.6'], ['', ''], ['Reported crime in Georgia', ''], ['', ''], ['2004', '4223.5'], ['2005', '4145'], ['2006', '3928.8'], ['2007', '3893.1'], ['2008', '3996.6'], ['', ''], ['Reported crime in Hawaii', ''], ['', ''], ['2004', '4795.5'], ['2005', '4800'], ['2006', '4219.9'], ['2007', '4119.3'], ['2008', '3566.5'], ['', ''], ['Reported crime in Idaho', ''], ['', ''], ['2004', '2781'], ['2005', '2697'], ['2006', '2386.9'], ['2007', '2264.2'], ['2008', '2116.5'], ['', ''], ['Reported crime in Illinois', ''], ['', ''], ['2004', '3174.1'], ['2005', '3092'], ['2006', '3019.6'], ['2007', '2935.8'], ['2008', '2932.6'], ['', ''], ['Reported crime in Indiana', ''], ['', ''], ['2004', '3403.6'], ['2005', '3460'], ['2006', '3464.3'], ['2007', '3386.5'], ['2008', '3339.6'], ['', ''], ['Reported crime in Iowa', ''], ['', ''], ['2004', '2904.8'], ['2005', '2845'], ['2006', '2870.3'], ['2007', '2648.6'], ['2008', '2440.5'], ['', ''], ['Reported crime in Kansas', ''], ['', ''], ['2004', '4015.5'], ['2005', '3806'], ['2006', '3858.5'], ['2007', '3693.8'], ['2008', '3397'], ['', ''], ['Reported crime in Kentucky', ''], ['', ''], ['2004', '2540.2'], ['2005', '2531'], ['2006', '2621.9'], ['2007', '2524.6'], ['2008', '2677.1'], ['', ''], ['Reported crime in Louisiana', ''], ['', ''], ['2004', '4419.1'], ['2005', '3696'], ['2006', '4088.5'], ['2007', '4196.1'], ['2008', '3880.2'], ['', ''], ['Reported crime in Maine', ''], ['', ''], ['2004', '2413.7'], ['2005', '2419'], ['2006', '2546.1'], ['2007', '2448.3'], ['2008', '2463.7'], ['', ''], ['Reported crime in Maryland', ''], ['', ''], ['2004', '3640.7'], ['2005', '3551'], ['2006', '3481.2'], ['2007', '3431.5'], ['2008', '3516'], ['', ''], ['Reported crime in Massachusetts', ''], ['', ''], ['2004', '2468.2'], ['2005', '2358'], ['2006', '2396'], ['2007', '2399.2'], ['2008', '2402'], ['', ''], ['Reported crime in Michigan', ''], ['', ''], ['2004', '3066.1'], ['2005', '3098'], ['2006', '3226'], ['2007', '3057.8'], ['2008', '2945.7'], ['', ''], ['Reported crime in Minnesota', ''], ['', ''], ['2004', '3041.6'], ['2005', '3088'], ['2006', '3088.8'], ['2007', '3045'], ['2008', '2858.1'], ['', ''], ['Reported crime in Mississippi', ''], ['', ''], ['2004', '3481.1'], ['2005', '3274'], ['2006', '3213'], ['2007', '3137.8'], ['2008', '2941.7'], ['', ''], ['Reported crime in Missouri', ''], ['', ''], ['2004', '3900.1'], ['2005', '3929'], ['2006', '3828.4'], ['2007', '3828.2'], ['2008', '3663.6'], ['', ''], ['Reported crime in Montana', ''], ['', ''], ['2004', '2936.1'], ['2005', '3146'], ['2006', '2863.4'], ['2007', '2863.6'], ['2008', '2720.9'], ['', ''], ['Reported crime in Nebraska', ''], ['', ''], ['2004', '3519.6'], ['2005', '3432'], ['2006', '3364.9'], ['2007', '3142.8'], ['2008', '2878.3'], ['', ''], ['Reported crime in Nevada', ''], ['', ''], ['2004', '4210'], ['2005', '4246'], ['2006', '4099.6'], ['2007', '3785.1'], ['2008', '3456.4'], ['', ''], ['Reported crime in New Hampshire', ''], ['', ''], ['2004', '2051.9'], ['2005', '1839'], ['2006', '2061.8'], ['2007', '1968.6'], ['2008', '2132.1'], ['', ''], ['Reported crime in New Mexico', ''], ['', ''], ['2004', '4198.4'], ['2005', '4132'], ['2006', '3947.5'], ['2007', '3846.7'], ['2008', '3817.4'], ['', ''], ['Reported crime in New York', ''], ['', ''], ['2004', '2192.5'], ['2005', '2102'], ['2006', '2063.2'], ['2007', '1992.1'], ['2008', '1993.7'], ['', ''], ['Reported crime in North Dakota', ''], ['', ''], ['2004', '1963.4'], ['2005', '2025'], ['2006', '2088.6'], ['2007', '1996.8'], ['2008', '2016.3'], ['', ''], ['Reported crime in Oklahoma', ''], ['', ''], ['2004', '4242.1'], ['2005', '4047'], ['2006', '3625'], ['2007', '3549.8'], ['2008', '3456.6'], ['', ''], ['Reported crime in Oregon', ''], ['', ''], ['2004', '4635.4'], ['2005', '4402'], ['2006', '3719.1'], ['2007', '3530.1'], ['2008', '3299.2'], ['', ''], ['Reported crime in Pennsylvania', ''], ['', ''], ['2004', '2417.3'], ['2005', '2422'], ['2006', '2451'], ['2007', '2364.4'], ['2008', '2412.4'], ['', ''], ['Reported crime in Rhode Island', ''], ['', ''], ['2004', '2886'], ['2005', '2728'], ['2006', '2614.6'], ['2007', '2602.2'], ['2008', '2845'], ['', ''], ['Reported crime in South Carolina', ''], ['', ''], ['2004', '4536.9'], ['2005', '4370'], ['2006', '4277.1'], ['2007', '4282.6'], ['2008', '4241.2'], ['', ''], ['Reported crime in South Dakota', ''], ['', ''], ['2004', '1931.6'], ['2005', '1767'], ['2006', '1811.1'], ['2007', '1774'], ['2008', '1706.1'], ['', ''], ['Reported crime in Tennessee', ''], ['', ''], ['2004', '4326.8'], ['2005', '4300'], ['2006', '4137.7'], ['2007', '4092.2'], ['2008', '4048.3'], ['', ''], ['Reported crime in Texas', ''], ['', ''], ['2004', '4497.7'], ['2005', '4319'], ['2006', '4084.2'], ['2007', '4121.6'], ['2008', '3987'], ['', ''], ['Reported crime in Utah', ''], ['', ''], ['2004', '4038.6'], ['2005', '3837'], ['2006', '3505.3'], ['2007', '3510.1'], ['2008', '3374'], ['', ''], ['Reported crime in Vermont', ''], ['', ''], ['2004', '2343.6'], ['2005', '2370'], ['2006', '2368'], ['2007', '2339'], ['2008', '2559.8'], ['', ''], ['Reported crime in Virginia', ''], ['', ''], ['2004', '2678.2'], ['2005', '2649'], ['2006', '2479.6'], ['2007', '2480'], ['2008', '2531.8'], ['', ''], ['Reported crime in Washington', ''], ['', ''], ['2004', '4846.7'], ['2005', '4890'], ['2006', '4483.3'], ['2007', '4026'], ['2008', '3785'], ['', ''], ['Reported crime in West Virginia', ''], ['', ''], ['2004', '2555.8'], ['2005', '2633'], ['2006', '2639.9'], ['2007', '2543.6'], ['2008', '2554.4'], ['', ''], ['Reported crime in Wisconsin', ''], ['', ''], ['2004', '2665.7'], ['2005', '2669'], ['2006', '2820'], ['2007', '2842.8'], ['2008', '2761.1'], ['', ''], ['Reported crime in Wyoming', ''], ['', ''], ['2004', '3338.5'], ['2005', '3158'], ['2006', '2989.1'], ['2007', '2883.2'], ['2008', '2724.2']]
transformed_data = transform_data(test_set)
print(transformed_data)

crime_data_wrangler_1_2

def transform_dataset(input_data):
    output_data = []
    current_state = None
    years = []
    values = []
    
    for entry in input_data:
        if entry[0].startswith('Reported crime in'):
            if current_state is not None:
                output_data.append([current_state] + values)
            current_state = entry[0].replace('Reported crime in ', '')
            years = []
            values = []
        elif entry[0].isdigit():
            years.append(entry[0])
            values.append(entry[1])
    
    if current_state is not None:
        output_data.append([current_state] + values)

    # Add header with years
    header = [''] + years
    output_data.insert(0, header)
        
    return output_data

test_set = [['Reported crime in Alabama', ''], ['', ''], ['2004', '4029.3'], ['2005', '3900'], ['2006', '3937'], ['2007', '3974.9'], ['2008', '4081.9'], ['', ''], ['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported...

output_dataset = transform_dataset(test_set)
print(output_dataset)

crime_data_wrangler_2_2

def transform_data(input_data):
    output_data = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_row = []
    
    for entry in input_data:
        if 'Reported crime' in entry[0]:
            if current_state:
                output_data.append(current_row)
            current_state = entry[0].replace('Reported crime in ', '')
            current_row = [current_state]
        elif entry[0].isdigit():
            current_row.append(entry[1])
    
    # Append the last state data
    if current_state:
        output_data.append(current_row)

    return output_data


# Test dataset
test_set = [['Reported crime in Alabama', ''], ['', ''], ['2004', '4029.3'], ['2005', '3900'], ['2006', '3937'], ['2007', '3974.9'], ['2008', '4081.9'], ['', ''], ['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945...

output = transform_data(test_set)

crime_data_wrangler_3_2

def transform_data(test_set):
    result = [['', '2004', '2005', '2006', '2007', '2008']]
    state_name = None
    crime_data = []

    for entry in test_set:
        if entry[1] == '':
            if state_name and crime_data:
                result.append([state_name] + crime_data)
            state_name = entry[0].replace('Reported crime in ', '') if entry[0] else None
            crime_data = []
        elif state_name:
            crime_data.append(entry[1])

    if state_name and crime_data:
        result.append([state_name] + crime_data)

    return result

# Example usage with the test set
test_set = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported crime in California', ''], ['', ''], ['2004', '3423.9'], ['2005', '3321'], ['2006', '3175.2'], ['2007', '3032.6'], ['2008', '2940.3'], ['', ''], ['Reported crime in Colorado', ''], ['', ''], ['2004', '3918.5'], ['2005', '4041'], ['2006', '3441.8'], ['2007', '2991.3'], ['2008', '2856.7'], ['', ''], ['Reported crime in Connecticut', ''], ['', ''], ['2004', '2684.9'], ['2005', '2579'], ['2006', '2575'], ['2007', '2470.6'], ['2008', '2490.8'], ['', ''], ['Reported crime in Delaware', ''], ['', ''], ['2004', '3283.6'], ['2005', '3118'], ['2006', '3474.5'], ['2007', '3427.1'], ['2008', '3594.7'], ['', ''], ['Reported crime in Florida', ''], ['', ''], ['2004', '4182.5'], ['2005', '4013'], ['2006', '3986.2'], ['2007', '4088.8'], ['2008', '4140.6'], ['', ''], ['Reported crime in Georgia', ''], ['', ''], ['2004', '4223.5'], ['2005', '4145'], ['2006', '3928.8'], ['2007', '3893.1'], ['2008', '3996.6'], ['', ''], ['Reported crime in Hawaii', ''], ['', ''], ['2004', '4795.5'], ['2005', '4800'], ['2006', '4219.9'], ['2007', '4119.3'], ['2008', '3566.5'], ['', ''], ['Reported crime in Idaho', ''], ['', ''], ['2004', '2781'], ['2005', '2697'], ['2006', '2386.9'], ['2007', '2264.2'], ['2008', '2116.5'], ['', ''], ['Reported crime in Illinois', ''], ['', ''], ['2004', '3174.1'], ['2005', '3092'], ['2006', '3019.6'], ['2007', '2935.8'], ['2008', '2932.6'], ['', ''], ['Reported crime in Indiana', ''], ['', ''], ['2004', '3403.6'], ['2005', '3460'], ['2006', '3464.3'], ['2007', '3386.5'], ['2008', '3339.6'], ['', ''], ['Reported crime in Iowa', ''], ['', ''], ['2004', '2904.8'], ['2005', '2845'], ['2006', '2870.3'], ['2007', '2648.6'], ['2008', '2440.5'], ['', ''], ['Reported crime in Kansas', ''], ['', ''], ['2004', '4015.5'], ['2005', '3806'], ['2006', '3858.5'], ['2007', '3693.8'], ['2008', '3397'], ['', ''], ['Reported crime in Kentucky', ''], ['', ''], ['2004', '2540.2'], ['2005', '2531'], ['2006', '2621.9'], ['2007', '2524.6'], ['2008', '2677.1'], ['', ''], ['Reported crime in Louisiana', ''], ['', ''], ['2004', '4419.1'], ['2005', '3696'], ['2006', '4088.5'], ['2007', '4196.1'], ['2008', '3880.2'], ['', ''], ['Reported crime in Maine', ''], ['', ''], ['2004', '2413.7'], ['2005', '2419'], ['2006', '2546.1'], ['2007', '2448.3'], ['2008', '2463.7'], ['', ''], ['Reported crime in Maryland', ''], ['', ''], ['2004', '3640.7'], ['2005', '3551'], ['2006', '3481.2'], ['2007', '3431.5'], ['2008', '3516'], ['', ''], ['Reported crime in Massachusetts', ''], ['', ''], ['2004', '2468.2'], ['2005', '2358'], ['2006', '2396'], ['2007', '2399.2'], ['2008', '2402'], ['', ''], ['Reported crime in Michigan', ''], ['', ''], ['2004', '3066.1'], ['2005', '3098'], ['2006', '3226'], ['2007', '3057.8'], ['2008', '2945.7'], ['', ''], ['Reported crime in Minnesota', ''], ['', ''], ['2004', '3041.6'], ['2005', '3088'], ['2006', '3088.8'], ['2007', '3045'], ['2008', '2858.1'], ['', ''], ['Reported crime in Mississippi', ''], ['', ''], ['2004', '3481.1'], ['2005', '3274'], ['2006', '3213'], ['2007', '3137.8'], ['2008', '2941.7'], ['', ''], ['Reported crime in Missouri', ''], ['', ''], ['2004', '3900.1'], ['2005', '3929'], ['2006', '3828.4'], ['2007', '3828.2'], ['2008', '3663.6'], ['', ''], ['Reported crime in Montana', ''], ['', ''], ['2004', '2936.1'], ['2005', '3146'], ['2006', '2863.4'], ['2007', '2863.6'], ['2008', '2720.9'], ['', ''], ['Reported crime in Nebraska', ''], ['', ''], ['2004', '3519.6'], ['2005', '3432'], ['2006', '3364.9'], ['2007', '3142.8'], ['2008', '2878.3'], ['', ''], ['Reported crime in Nevada', ''], ['', ''], ['2004', '4210'], ['2005', '4246'], ['2006', '4099.6'], ['2007', '3785.1'], ['2008', '3456.4'], ['', ''], ['Reported crime in New Hampshire', ''], ['', ''], ['2004', '2051.9'], ['2005', '1839'], ['2006', '2061.8'], ['2007', '1968.6'], ['2008', '2132.1'], ['', ''], ['Reported crime in New Mexico', ''], ['', ''], ['2004', '4198.4'], ['2005', '4132'], ['2006', '3947.5'], ['2007', '3846.7'], ['2008', '3817.4'], ['', ''], ['Reported crime in New York', ''], ['', ''], ['2004', '2192.5'], ['2005', '2102'], ['2006', '2063.2'], ['2007', '1992.1'], ['2008', '1993.7'], ['', ''], ['Reported crime in North Carolina', ''], ['', ''], ['2004', '4160.5'], ['2005', '4080'], ['2006', '4119.5'], ['2007', '4101.8'], ['2008', '4041.1'], ['', ''], ['Reported crime in North Dakota', ''], ['', ''], ['2004', '1963.4'], ['2005', '2025'], ['2006', '2088.6'], ['2007', '1996.8'], ['2008', '2016.3'], ['', ''], ['Reported crime in Ohio', ''], ['', ''], ['2004', '3662.3'], ['2005', '3668'], ['2006', '3716.2'], ['2007', '3461.6'], ['2008', '3419.2'], ['', ''], ['Reported crime in Oklahoma', ''], ['', ''], ['2004', '4242.1'], ['2005', '4047'], ['2006', '3625'], ['2007', '3549.8'], ['2008', '3456.6'], ['', ''], ['Reported crime in Oregon', ''], ['', ''], ['2004', '4635.4'], ['2005', '4402'], ['2006', '3719.1'], ['2007', '3530.1'], ['2008', '3299.2'], ['', ''], ['Reported crime in Pennsylvania', ''], ['', ''], ['2004', '2417.3'], ['2005', '2422'], ['2006', '2451'], ['2007', '2364.4'], ['2008', '2412.4'], ['', ''], ['Reported crime in Rhode Island', ''], ['', ''], ['2004', '2886'], ['2005', '2728'], ['2006', '2614.6'], ['2007', '2602.2'], ['2008', '2845'], ['', ''], ['Reported crime in South Carolina', ''], ['', ''], ['2004', '4536.9'], ['2005', '4370'], ['2006', '4277.1'], ['2007', '4282.6'], ['2008', '4241.2'], ['', ''], ['Reported crime in South Dakota', ''], ['', ''], ['2004', '1931.6'], ['2005', '1767'], ['2006', '1811.1'], ['2007', '1774'], ['2008', '1706.1'], ['', ''], ['Reported crime in Tennessee', ''], ['', ''], ['2004', '4326.8'], ['2005', '4300'], ['2006', '4137.7'], ['2007', '4092.2'], ['2008', '4048.3'], ['', ''], ['Reported crime in Texas', ''], ['', ''], ['2004', '4497.7'], ['2005', '4319'], ['2006', '4084.2'], ['2007', '4121.6'], ['2008', '3987'], ['', ''], ['Reported crime in Utah', ''], ['', ''], ['2004', '4038.6'], ['2005', '3837'], ['2006', '3505.3'], ['2007', '3510.1'], ['2008', '3374'], ['', ''], ['Reported crime in Vermont', ''], ['', ''], ['2004', '2343.6'], ['2005', '2370'], ['2006', '2368'], ['2007', '2339'], ['2008', '2559.8'], ['', ''], ['Reported crime in Virginia', ''], ['', ''], ['2004', '2678.2'], ['2005', '2649'], ['2006', '2479.6'], ['2007', '2480'], ['2008', '2531.8'], ['', ''], ['Reported crime in Washington', ''], ['', ''], ['2004', '4846.7'], ['2005', '4890'], ['2006', '4483.3'], ['2007', '4026'], ['2008', '3785'], ['', ''], ['Reported crime in West Virginia', ''], ['', ''], ['2004', '2555.8'], ['2005', '2633'], ['2006', '2639.9'], ['2007', '2543.6'], ['2008', '2554.4'], ['', ''], ['Reported crime in Wisconsin', ''], ['', ''], ['2004', '2665.7'], ['2005', '2669'], ['2006', '2820'], ['2007', '2842.8'], ['2008', '2761.1'], ['', ''], ['Reported crime in Wyoming', ''], ['', ''], ['2004', '3338.5'], ['2005', '3158'], ['2006', '2989.1'], ['2007', '2883.2'], ['2008', '2724.2']]
transformed_data = transform_data(test_set)
for row in transformed_data:
    print(row)

crime_data_wrangler_4_2

def transform_crime_data(data):
    transformed_data = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_row = []

    for row in data:
        if row[0].startswith('Reported crime in'):
            if current_state:
                transformed_data.append(current_row)
            current_state = row[0].replace('Reported crime in ', '')
            current_row = [current_state]
        elif row[0].isdigit():
            current_row.append(row[1])

    if current_state:
        transformed_data.append(current_row)
    
    return transformed_data

# Test the function with the test set data
test_set = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['...

output = transform_crime_data(test_set)
print(output)

crime_data_wrangler_5_2

def transform_data(input_data):
    result = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_data = []

    for row in input_data:
        if row[0].startswith('Reported crime'):
            if current_state and current_data:
                result.append([current_state] + current_data)
            current_state = row[0].split('in ')[1]
            current_data = []
        elif row[0].isdigit():
            current_data.append(row[1])

    if current_state and current_data:
        result.append([current_state] + current_data)

    return result

# Example use:
# test_data is provided as an argument to the function
test_data = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], 
             ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], 
             ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'],
             # Add the rest of the test data here...
            ]

output = transform_data(test_data)
for row in output:
    print(row)

crime_data_wrangler_1_3

def transform_dataset(input_data):
    output_data = []
    current_state = None
    years = []
    values = []
    
    for entry in input_data:
        if entry[0].startswith('Reported crime in'):
            if current_state is not None:
                output_data.append([current_state] + values)
            current_state = entry[0].replace('Reported crime in ', '')
            years = []
            values = []
        elif entry[0].isdigit():
            years.append(entry[0])
            values.append(entry[1])
    
    if current_state is not None:
        output_data.append([current_state] + values)

    # Add header with years
    header = [''] + years
    output_data.insert(0, header)
        
    return output_data

test_set = [['Reported crime in Alabama', ''], ['', ''], ['2004', '4029.3'], ['2005', '3900'], ['2006', '3937'], ['2007', '3974.9'], ['2008', '4081.9'], ['', ''], ['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported...

output_dataset = transform_dataset(test_set)
print(output_dataset)

crime_data_wrangler_2_3

def transform_data(input_data):
    output_data = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_row = []
    
    for entry in input_data:
        if 'Reported crime' in entry[0]:
            if current_state:
                output_data.append(current_row)
            current_state = entry[0].replace('Reported crime in ', '')
            current_row = [current_state]
        elif entry[0].isdigit():
            current_row.append(entry[1])
    
    # Append the last state data
    if current_state:
        output_data.append(current_row)

    return output_data


test_data = [['Reported crime in Alabama', ''], ['', ''], ['2004', '4029.3'], ['2005', '3900'], ['2006', '3937'], ['2007', '3974.9'], ['2008', '4081.9'], ['', ''], ['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['...

transformed_test_data = transform_data(test_data)
print(transformed_test_data)

crime_data_wrangler_3_3

def transform_data(test_set):
    result = [['', '2004', '2005', '2006', '2007', '2008']]
    state_name = None
    crime_data = []

    for entry in test_set:
        if entry[1] == '':
            if state_name and crime_data:
                result.append([state_name] + crime_data)
            state_name = entry[0].replace('Reported crime in ', '') if entry[0] else None
            crime_data = []
        elif state_name:
            crime_data.append(entry[1])

    if state_name and crime_data:
        result.append([state_name] + crime_data)

    return result

# Example usage with the test set
test_set = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported crime in California', ''], ['', ''], ['2004', '3423.9'], ['2005', '3321'], ['2006', '3175.2'], ['2007', '3032.6'], ['2008', '2940.3'], ['', ''], ['Reported crime in Colorado', ''], ['', ''], ['2004', '3918.5'], ['2005', '4041'], ['2006', '3441.8'], ['2007', '2991.3'], ['2008', '2856.7'], ['', ''], ['Reported crime in Connecticut', ''], ['', ''], ['2004', '2684.9'], ['2005', '2579'], ['2006', '2575'], ['2007', '2470.6'], ['2008', '2490.8'], ['', ''], ['Reported crime in Delaware', ''], ['', ''], ['2004', '3283.6'], ['2005', '3118'], ['2006', '3474.5'], ['2007', '3427.1'], ['2008', '3594.7'], ['', ''], ['Reported crime in Florida', ''], ['', ''], ['2004', '4182.5'], ['2005', '4013'], ['2006', '3986.2'], ['2007', '4088.8'], ['2008', '4140.6'], ['', ''], ['Reported crime in Georgia', ''], ['', ''], ['2004', '4223.5'], ['2005', '4145'], ['2006', '3928.8'], ['2007', '3893.1'], ['2008', '3996.6'], ['', ''], ['Reported crime in Hawaii', ''], ['', ''], ['2004', '4795.5'], ['2005', '4800'], ['2006', '4219.9'], ['2007', '4119.3'], ['2008', '3566.5'], ['', ''], ['Reported crime in Idaho', ''], ['', ''], ['2004', '2781'], ['2005', '2697'], ['2006', '2386.9'], ['2007', '2264.2'], ['2008', '2116.5'], ['', ''], ['Reported crime in Illinois', ''], ['', ''], ['2004', '3174.1'], ['2005', '3092'], ['2006', '3019.6'], ['2007', '2935.8'], ['2008', '2932.6'], ['', ''], ['Reported crime in Indiana', ''], ['', ''], ['2004', '3403.6'], ['2005', '3460'], ['2006', '3464.3'], ['2007', '3386.5'], ['2008', '3339.6'], ['', ''], ['Reported crime in Iowa', ''], ['', ''], ['2004', '2904.8'], ['2005', '2845'], ['2006', '2870.3'], ['2007', '2648.6'], ['2008', '2440.5'], ['', ''], ['Reported crime in Kansas', ''], ['', ''], ['2004', '4015.5'], ['2005', '3806'], ['2006', '3858.5'], ['2007', '3693.8'], ['2008', '3397'], ['', ''], ['Reported crime in Kentucky', ''], ['', ''], ['2004', '2540.2'], ['2005', '2531'], ['2006', '2621.9'], ['2007', '2524.6'], ['2008', '2677.1'], ['', ''], ['Reported crime in Louisiana', ''], ['', ''], ['2004', '4419.1'], ['2005', '3696'], ['2006', '4088.5'], ['2007', '4196.1'], ['2008', '3880.2'], ['', ''], ['Reported crime in Maine', ''], ['', ''], ['2004', '2413.7'], ['2005', '2419'], ['2006', '2546.1'], ['2007', '2448.3'], ['2008', '2463.7'], ['', ''], ['Reported crime in Maryland', ''], ['', ''], ['2004', '3640.7'], ['2005', '3551'], ['2006', '3481.2'], ['2007', '3431.5'], ['2008', '3516'], ['', ''], ['Reported crime in Massachusetts', ''], ['', ''], ['2004', '2468.2'], ['2005', '2358'], ['2006', '2396'], ['2007', '2399.2'], ['2008', '2402'], ['', ''], ['Reported crime in Michigan', ''], ['', ''], ['2004', '3066.1'], ['2005', '3098'], ['2006', '3226'], ['2007', '3057.8'], ['2008', '2945.7'], ['', ''], ['Reported crime in Minnesota', ''], ['', ''], ['2004', '3041.6'], ['2005', '3088'], ['2006', '3088.8'], ['2007', '3045'], ['2008', '2858.1'], ['', ''], ['Reported crime in Mississippi', ''], ['', ''], ['2004', '3481.1'], ['2005', '3274'], ['2006', '3213'], ['2007', '3137.8'], ['2008', '2941.7'], ['', ''], ['Reported crime in Missouri', ''], ['', ''], ['2004', '3900.1'], ['2005', '3929'], ['2006', '3828.4'], ['2007', '3828.2'], ['2008', '3663.6'], ['', ''], ['Reported crime in Montana', ''], ['', ''], ['2004', '2936.1'], ['2005', '3146'], ['2006', '2863.4'], ['2007', '2863.6'], ['2008', '2720.9'], ['', ''], ['Reported crime in Nebraska', ''], ['', ''], ['2004', '3519.6'], ['2005', '3432'], ['2006', '3364.9'], ['2007', '3142.8'], ['2008', '2878.3'], ['', ''], ['Reported crime in Nevada', ''], ['', ''], ['2004', '4210'], ['2005', '4246'], ['2006', '4099.6'], ['2007', '3785.1'], ['2008', '3456.4'], ['', ''], ['Reported crime in New Hampshire', ''], ['', ''], ['2004', '2051.9'], ['2005', '1839'], ['2006', '2061.8'], ['2007', '1968.6'], ['2008', '2132.1'], ['', ''], ['Reported crime in New Mexico', ''], ['', ''], ['2004', '4198.4'], ['2005', '4132'], ['2006', '3947.5'], ['2007', '3846.7'], ['2008', '3817.4'], ['', ''], ['Reported crime in New York', ''], ['', ''], ['2004', '2192.5'], ['2005', '2102'], ['2006', '2063.2'], ['2007', '1992.1'], ['2008', '1993.7'], ['', ''], ['Reported crime in North Carolina', ''], ['', ''], ['2004', '4160.5'], ['2005', '4080'], ['2006', '4119.5'], ['2007', '4101.8'], ['2008', '4041.1'], ['', ''], ['Reported crime in North Dakota', ''], ['', ''], ['2004', '1963.4'], ['2005', '2025'], ['2006', '2088.6'], ['2007', '1996.8'], ['2008', '2016.3'], ['', ''], ['Reported crime in Ohio', ''], ['', ''], ['2004', '3662.3'], ['2005', '3668'], ['2006', '3716.2'], ['2007', '3461.6'], ['2008', '3419.2'], ['', ''], ['Reported crime in Oklahoma', ''], ['', ''], ['2004', '4242.1'], ['2005', '4047'], ['2006', '3625'], ['2007', '3549.8'], ['2008', '3456.6'], ['', ''], ['Reported crime in Oregon', ''], ['', ''], ['2004', '4635.4'], ['2005', '4402'], ['2006', '3719.1'], ['2007', '3530.1'], ['2008', '3299.2'], ['', ''], ['Reported crime in Pennsylvania', ''], ['', ''], ['2004', '2417.3'], ['2005', '2422'], ['2006', '2451'], ['2007', '2364.4'], ['2008', '2412.4'], ['', ''], ['Reported crime in Rhode Island', ''], ['', ''], ['2004', '2886'], ['2005', '2728'], ['2006', '2614.6'], ['2007', '2602.2'], ['2008', '2845'], ['', ''], ['Reported crime in South Carolina', ''], ['', ''], ['2004', '4536.9'], ['2005', '4370'], ['2006', '4277.1'], ['2007', '4282.6'], ['2008', '4241.2'], ['', ''], ['Reported crime in South Dakota', ''], ['', ''], ['2004', '1931.6'], ['2005', '1767'], ['2006', '1811.1'], ['2007', '1774'], ['2008', '1706.1'], ['', ''], ['Reported crime in Tennessee', ''], ['', ''], ['2004', '4326.8'], ['2005', '4300'], ['2006', '4137.7'], ['2007', '4092.2'], ['2008', '4048.3'], ['', ''], ['Reported crime in Texas', ''], ['', ''], ['2004', '4497.7'], ['2005', '4319'], ['2006', '4084.2'], ['2007', '4121.6'], ['2008', '3987'], ['', ''], ['Reported crime in Utah', ''], ['', ''], ['2004', '4038.6'], ['2005', '3837'], ['2006', '3505.3'], ['2007', '3510.1'], ['2008', '3374'], ['', ''], ['Reported crime in Vermont', ''], ['', ''], ['2004', '2343.6'], ['2005', '2370'], ['2006', '2368'], ['2007', '2339'], ['2008', '2559.8'], ['', ''], ['Reported crime in Virginia', ''], ['', ''], ['2004', '2678.2'], ['2005', '2649'], ['2006', '2479.6'], ['2007', '2480'], ['2008', '2531.8'], ['', ''], ['Reported crime in Washington', ''], ['', ''], ['2004', '4846.7'], ['2005', '4890'], ['2006', '4483.3'], ['2007', '4026'], ['2008', '3785'], ['', ''], ['Reported crime in West Virginia', ''], ['', ''], ['2004', '2555.8'], ['2005', '2633'], ['2006', '2639.9'], ['2007', '2543.6'], ['2008', '2554.4'], ['', ''], ['Reported crime in Wisconsin', ''], ['', ''], ['2004', '2665.7'], ['2005', '2669'], ['2006', '2820'], ['2007', '2842.8'], ['2008', '2761.1'], ['', ''], ['Reported crime in Wyoming', ''], ['', ''], ['2004', '3338.5'], ['2005', '3158'], ['2006', '2989.1'], ['2007', '2883.2'], ['2008', '2724.2']]
transformed_data = transform_data(test_set)
for row in transformed_data:
    print(row)

crime_data_wrangler_4_3

def transform_crime_data(data):
    transformed_data = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_row = []

    for row in data:
        if row[0].startswith('Reported crime in'):
            if current_state:
                transformed_data.append(current_row)
            current_state = row[0].replace('Reported crime in ', '')
            current_row = [current_state]
        elif row[0].isdigit():
            current_row.append(row[1])

    if current_state:
        transformed_data.append(current_row)
    
    return transformed_data

# Test the function with the test dataset
test_set = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['200...

output = transform_crime_data(test_set)
print(output)

crime_data_wrangler_5_3

def transform_data(input_data):
    result = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_data = []

    for row in input_data:
        if row[0].startswith('Reported crime'):
            if current_state and current_data:
                result.append([current_state] + current_data)
            current_state = row[0].split('in ')[1]
            current_data = []
        elif row[0].isdigit():
            current_data.append(row[1])

    if current_state and current_data:
        result.append([current_state] + current_data)

    return result

# Example use:
# test_data = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ...]
# transformed_test_data = transform_data(test_data)

crime_data_wrangler_1_4

def transform_dataset(input_data):
    output_data = []
    current_state = None
    years = []
    values = []
    
    for entry in input_data:
        if entry[0].startswith('Reported crime in'):
            if current_state is not None:
                output_data.append([current_state] + values)
            current_state = entry[0].replace('Reported crime in ', '')
            years = []
            values = []
        elif entry[0].isdigit():
            years.append(entry[0])
            values.append(entry[1])
    
    if current_state is not None:
        output_data.append([current_state] + values)

    # Add header with years
    header = [''] + years
    output_data.insert(0, header)
        
    return output_data

test_set = [['Reported crime in Alabama', ''], ['', ''], ['2004', '4029.3'], ['2005', '3900'], ['2006', '3937'], ['2007', '3974.9'], ['2008', '4081.9'], ['', ''], ['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported...

output = transform_dataset(test_set)

crime_data_wrangler_2_4

def transform_data(input_data):
    output_data = [['', '2004', '2005', '2006', '2007', '2008']]
    current_state = None
    current_row = []
    
    for entry in input_data:
        if 'Reported crime' in entry[0]:
            if current_state:
                output_data.append(current_row)
            current_state = entry[0].replace('Reported crime in ', '')
            current_row = [current_state]
        elif entry[0] and entry[1]:
            current_row.append(entry[1])
    
    if current_state:
        output_data.append(current_row)
    
    return output_data

# Test set
test_set = [['Reported crime in Alabama', ''], ['', ''], ['2004', '4029.3'], ['2005', '3900'], ['2006', '3937'], ['2007', '3974.9'], ['2008', '4081.9'], ['', ''], ['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['...

output = transform_data(test_set)

crime_data_wrangler_3_4

def transform_data(test_set):
    result = [['', '2004', '2005', '2006', '2007', '2008']]
    state_name = None
    crime_data = []

    for entry in test_set:
        if entry[0].startswith('Reported crime in '):
            if state_name:
                result.append([state_name] + crime_data)
            state_name = entry[0].replace('Reported crime in ', '')
            crime_data = []
        elif entry[0].isdigit():
            crime_data.append(entry[1])

    if state_name:
        result.append([state_name] + crime_data)

    return result

test_set = [['Reported crime in Alaska', ''], ['', ''], ['2004', '3370.9'], ['2005', '3615'], ['2006', '3582'], ['2007', '3373.9'], ['2008', '2928.3'], ['', ''], ['Reported crime in Arizona', ''], ['', ''], ['2004', '5073.3'], ['2005', '4827'], ['2006', '4741.6'], ['2007', '4502.6'], ['2008', '4087.3'], ['', ''], ['Reported crime in Arkansas', ''], ['', ''], ['2004', '4033.1'], ['2005', '4068'], ['2006', '4021.6'], ['2007', '3945.5'], ['2008', '3843.7'], ['', ''], ['Reported crime in California', ''], ['', ''], ['2004', '3423.9'], ['2005', '3321'], ['2006', '3175.2'], ['2007', '3032.6'], ['2008', '2940.3'], ['', ''], ['Reported crime in Colorado', ''], ['', ''], ['2004', '3918.5'], ['2005', '4041'], ['2006', '3441.8'], ['2007', '2991.3'], ['2008', '2856.7'], ['', ''], ['Reported crime in Connecticut', ''], ['', ''], ['2004', '2684.9'], ['2005', '2579'], ['2006', '2575'], ['2007', '2470.6'], ['2008', '2490.8'], ['', ''], ['Reported crime in Delaware', ''], ['', ''], ['2004', '3283.6'], ['2005', '3118'], ['2006', '3474.5'], ['2007', '3427.1'], ['2008', '3594.7'], ['', ''], ['Reported crime in Florida', ''], ['', ''], ['2004', '4182.5'], ['2005', '4013'], ['2006', '3986.2'], ['2007', '4088.8'], ['2008', '4140.6'], ['', ''], ['Reported crime in Georgia', ''], ['', ''], ['2004', '4223.5'], ['2005', '4145'], ['2006', '3928.8'], ['2007', '3893.1'], ['2008', '3996.6'], ['', ''], ['Reported crime in Hawaii', ''], ['', ''], ['2004', '4795.5'], ['2005', '4800'], ['2006', '4219.9'], ['2007', '4119.3'], ['2008', '3566.5'], ['', ''], ['Reported crime in Idaho', ''], ['', ''], ['2004', '2781'], ['2005', '2697'], ['2006', '2386.9'], ['2007', '2264.2'], ['2008', '2116.5'], ['', ''], ['Reported crime in Illinois', ''], ['', ''], ['2004', '3174.1'], ['2005', '3092'], ['2006', '3019.6'], ['2007', '2935.8'], ['2008', '2932.6'], ['', ''], ['Reported crime in Indiana', ''], ['', ''], ['2004', '3403.6'], ['2005', '3460'], ['2006', '3464.3'], ['2007', '3386.5'], ['2008', '3339.6'], ['', ''], ['Reported crime in Iowa', ''], ['', ''], ['2004', '2904.8'], ['2005', '2845'], ['2006', '2870.3'], ['2007', '2648.6'], ['2008', '2440.5'], ['', ''], ['Reported crime in Kansas', ''], ['', ''], ['2004', '4015.5'], ['2005', '3806'], ['2006', '3858.5'], ['2007', '3693.8'], ['2008', '3397'], ['', ''], ['Reported crime in Kentucky', ''], ['', ''], ['2004', '2540.2'], ['2005', '2531'], ['2006', '2621.9'], ['2007', '2524.6'], ['2008', '2677.1'], ['', ''], ['Reported crime in Louisiana', ''], ['', ''], ['2004', '4419.1'], ['2005', '3696'], ['2006', '4088.5'], ['2007', '4196.1'], ['2008', '3880.2'], ['', ''], ['Reported crime in Maine', ''], ['', ''], ['2004', '2413.7'], ['2005', '2419'], ['2006', '2546.1'], ['2007', '2448.3'], ['2008', '2463.7'], ['', ''], ['Reported crime in Maryland', ''], ['', ''], ['2004', '3640.7'], ['2005', '3551'], ['2006', '3481.2'], ['2007', '3431.5'], ['2008', '3516'], ['', ''], ['Reported crime in Massachusetts', ''], ['', ''], ['2004', '2468.2'], ['2005', '2358'], ['2006', '2396'], ['2007', '2399.2'], ['2008', '2402'], ['', ''], ['Reported crime in Michigan', ''], ['', ''], ['2004', '3066.1'], ['2005', '3098'], ['2006', '3226'], ['2007', '3057.8'], ['2008', '2945.7'], ['', ''], ['Reported crime in Minnesota', ''], ['', ''], ['2004', '3041.6'], ['2005', '3088'], ['2006', '3088.8'], ['2007', '3045'], ['2008', '2858.1'], ['', ''], ['Reported crime in Mississippi', ''], ['', ''], ['2004', '3481.1'], ['2005', '3274'], ['2006', '3213'], ['2007', '3137.8'], ['2008', '2941.7'], ['', ''], ['Reported crime in Missouri', ''], ['', ''], ['2004', '3900.1'], ['2005', '3929'], ['2006', '3828.4'], ['2007', '3828.2'], ['2008', '3663.6'], ['', ''], ['Reported crime in Montana', ''], ['', ''], ['2004', '2936.1'], ['2005', '3146'], ['2006', '2863.4'], ['2007', '2863.6'], ['2008', '2720.9'], ['', ''], ['Reported crime in Nebraska', ''], ['', ''], ['2004', '3519.6'], ['2005', '3432'], ['2006', '3364.9'], ['2007', '3142.8'], ['2008', '2878.3'], ['', ''], ['Reported crime in Nevada', ''], ['', ''], ['2004', '4210'], ['2005', '4246'], ['2006', '4099.6'], ['2007', '3785.1'], ['2008', '3456.4'], ['', ''], ['Reported crime in New Hampshire', ''], ['', ''], ['2004', '2051.9'], ['2005', '1839'], ['2006', '2061.8'], ['2007', '1968.6'], ['2008', '2132.1'], ['', ''], ['Reported crime in New Mexico', ''], ['', ''], ['2004', '4198.4'], ['2005', '4132'], ['2006', '3947.5'], ['2007', '3846.7'], ['2008', '3817.4'], ['', ''], ['Reported crime in New York', ''], ['', ''], ['2004', '2192.5'], ['2005', '2102'], ['2006', '2063.2'], ['2007', '1992.1'], ['2008', '1993.7'], ['', ''], ['Reported crime in North Carolina', ''], ['', ''], ['2004', '4160.5'], ['2005', '4080'], ['2006', '4119.5'], ['2007', '4101.8'], ['2008', '4041.1'], ['', ''], ['Reported crime in North Dakota', ''], ['', ''], ['2004', '1963.4'], ['2005', '2025'], ['2006', '2088.6'], ['2007', '1996.8'], ['2008', '2016.3'], ['', ''], ['Reported crime in Ohio', ''], ['', ''], ['2004', '3662.3'], ['2005', '3668'], ['2006', '3716.2'], ['2007', '3461.6'], ['2008', '3419.2'], ['', ''], ['Reported crime in Oklahoma', ''], ['', ''], ['2004', '4242.1'], ['2005', '4047'], ['2006', '3625'], ['2007', '3549.8'], ['2008', '3456.6'], ['', ''], ['Reported crime in Oregon', ''], ['', ''], ['2004', '4635.4'], ['2005', '4402'], ['2006', '3719.1'], ['2007', '3530.1'], ['2008', '3299.2'], ['', ''], ['Reported crime in Pennsylvania', ''], ['', ''], ['2004', '2417.3'], ['2005', '2422'], ['2006', '2451'], ['2007', '2364.4'], ['2008', '2412.4'], ['', ''], ['Reported crime in Rhode Island', ''], ['', ''], ['2004', '2886'], ['2005', '2728'], ['2006', '2614.6'], ['2007', '2602.2'], ['2008', '2845'], ['', ''], ['Reported crime in South Carolina', ''], ['', ''], ['2004', '4536.9'], ['2005', '4370'], ['2006', '4277.1'], ['2007', '4282.6'], ['2008', '4241.2'], ['', ''], ['Reported crime in South Dakota', ''], ['', ''], ['2004', '1931.6'], ['2005', '1767'], ['2006', '1811.1'], ['2007', '1774'], ['2008', '1706.1'], ['', ''], ['Reported crime in Tennessee', ''], ['', ''], ['2004', '4326.8'], ['2005', '4300'], ['2006', '4137.7'], ['2007', '4092.2'], ['2008', '4048.3'], ['', ''], ['Reported crime in Texas', ''], ['', ''], ['2004', '4497.7'], ['2005', '4319'], ['2006', '4084.2'], ['2007', '4121.6'], ['2008', '3987'], ['', ''], ['Reported crime in Utah', ''], ['', ''], ['2004', '4038.6'], ['2005', '3837'], ['2006', '3505.3'], ['2007', '3510.1'], ['2008', '3374'], ['', ''], ['Reported crime in Vermont', ''], ['', ''], ['2004', '2343.6'], ['2005', '2370'], ['2006', '2368'], ['2007', '2339'], ['2008', '2559.8'], ['', ''], ['Reported crime in Virginia', ''], ['', ''], ['2004', '2678.2'], ['2005', '2649'], ['2006', '2479.6'], ['2007', '2480'], ['2008', '2531.8'], ['', ''], ['Reported crime in Washington', ''], ['', ''], ['2004', '4846.7'], ['2005', '4890'], ['2006', '4483.3'], ['2007', '4026'], ['2008', '3785'], ['', ''], ['Reported crime in West Virginia', ''], ['', ''], ['2004', '2555.8'], ['2005', '2633'], ['2006', '2639.9'], ['2007', '2543.6'], ['2008', '2554.4'], ['', ''], ['Reported crime in Wisconsin', ''], ['', ''], ['2004', '2665.7'], ['2005', '2669'], ['2006', '2820'], ['2007', '2842.8'], ['2008', '2761.1'], ['', ''], ['Reported crime in Wyoming', ''], ['', ''], ['2004', '3338.5'], ['2005', '3158'], ['2006', '2989.1'], ['2007', '2883.2'], ['2008', '2724.2']]
print(transform_data(test_set))

potters_wheel_unfold_1_0

def transform_dataset(test_set):
    subjects = sorted(set(entry[1] for entry in test_set))
    students = sorted(set(entry[0] for entry in test_set))
    
    output_dataset = [[''] + subjects]
    
    student_grades = {student: [''] * len(subjects) for student in students}
    
    for record in test_set:
        student, subject, grade = record
        subject_index = subjects.index(subject)
        student_grades[student][subject_index] = grade
        
    for student in students:
        output_dataset.append([student] + student_grades[student])
    
    return output_dataset

# Test the function
test_set = [
    ['Anna', 'Math', '43'], 
    ['Anna', 'French', '78'], 
    ['Bob', 'English', '96'], 
    ['Bob', 'French', '54'], 
    ['Joan', 'English', '79'], 
    ['Tom', 'Math', '90'], 
    ['Tom', 'French', '85'], 
    ['Rob', 'English', '87'], 
    ['Rob', 'French', '92']
]

output = transform_dataset(test_set)
for line in output:
    print(line)

potters_wheel_unfold_2_0

def transform_to_output(test_set):
    subjects = ['Math', 'French', 'English']
    students = {}
    
    for record in test_set:
        student = record[0]
        subject = record[1]
        score = record[2]
        
        if student not in students:
            students[student] = ['', '', '']
        
        if subject in subjects:
            index = subjects.index(subject)
            students[student][index] = score
    
    result = [[''] + subjects]
    for student, scores in students.items():
        result.append([student] + scores)
    
    return result

# Example test set usage
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Bob', 'English', '96'], 
            ['Bob', 'French', '54'], ['Tom', 'Math', '90'], ['Tom', 'French', '85'], 
            ['Rob', 'English', '87'], ['Rob', 'French', '92']]

output = transform_to_output(test_set)
print(output)

potters_wheel_unfold_3_0

def transform_dataset(test_set):
    subjects = ['Math', 'French', 'English']
    students = {}
    
    for record in test_set:
        student = record[0]
        subject = record[1]
        score = record[2]
        
        if student not in students:
            students[student] = ['', '', '']
        
        if subject in subjects:
            index = subjects.index(subject)
            students[student][index] = score
    
    result = [[''] + subjects]
    for student, scores in students.items():
        result.append([student] + scores)
    
    return result

# Test set
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Bob', 'English', '96'], ['Bob', 'French', '54'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
print(transform_dataset(test_set))

potters_wheel_unfold_4_0

def transform_dataset(test_set):
    # Initialize the output dataset with headers
    subjects = ['Math', 'French', 'English']
    header = [''] + subjects
    output = [header]

    # Create a dictionary to map each student to their scores by subject
    student_scores = {}
    all_students = set()

    # Fill in the input data
    input_data = [['George', 'Math', '65'], ['George', 'French', '42'], ['Bob', 'English', '96'], 
                  ['Bob', 'French', '54'], ['Joan', 'English', '79'], ['Anna', 'Math', '43'], 
                  ['Anna', 'French', '78']]
    
    # Processing original input data
    for entry in input_data:
        student, subject, score = entry
        if student not in student_scores:
            student_scores[student] = ['', '', '']  # Initialize scores for each subject
            all_students.add(student)
        subject_index = subjects.index(subject)
        student_scores[student][subject_index] = score

    # Processing test data
    for entry in test_set:
        student, subject, score = entry
        if student not in student_scores:
            student_scores[student] = ['', '', '']
            all_students.add(student)
        subject_index = subjects.index(subject)
        student_scores[student][subject_index] = score

    # Populate the output data with the scores
    for student in sorted(all_students):
        scores = student_scores[student]
        row = [student] + scores
        output.append(row)

    return output

# Test the function
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
result = transform_dataset(test_set)
for row in result:
    print(row)

potters_wheel_unfold_5_0

def transform_data(test_set):
    subjects = set(subject for _, subject, _ in test_set)
    sorted_subjects = sorted(subjects)
    header = [''] + sorted_subjects
    student_records = {}
    
    for student, subject, score in test_set:
        if student not in student_records:
            student_records[student] = [''] * len(sorted_subjects)
        column_index = sorted_subjects.index(subject)
        student_records[student][column_index] = score
    
    output = [header]
    for student, scores in student_records.items():
        output.append([student] + scores)
    
    return output

test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
print(transform_data(test_set))

potters_wheel_unfold_1_1

def transform_dataset(test_set):
    subjects = sorted(set(entry[1] for entry in test_set))
    results = [[''] + subjects]
    
    students = {}
    for entry in test_set:
        name, subject, score = entry
        if name not in students:
            students[name] = {}
        students[name][subject] = score
    
    for name, scores in students.items():
        row = [name] + [scores.get(subject, '') for subject in subjects]
        results.append(row)
    
    return results

# Example usage:
test_set = [
    ['Anna', 'Math', '43'], 
    ['Anna', 'French', '78'], 
    ['Bob', 'English', '96'], 
    ['Bob', 'French', '54'], 
    ['Joan', 'English', '79'], 
    ['Tom', 'Math', '90'], 
    ['Tom', 'French', '85'], 
    ['Rob', 'English', '87'], 
    ['Rob', 'French', '92']
]

output = transform_dataset(test_set)
print(output)

potters_wheel_unfold_2_1

def transform_to_output(test_set):
    subjects = ['Math', 'French', 'English']
    students = {}
    
    for record in test_set:
        student = record[0]
        subject = record[1]
        score = record[2]
        
        if student not in students:
            students[student] = ['', '', '']
        
        index = subjects.index(subject)
        students[student][index] = score

    output = [[''] + subjects]
    
    for student, scores in students.items():
        output.append([student] + scores)
    
    return output

# Test case
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Bob', 'English', '96'], 
            ['Bob', 'French', '54'], ['Tom', 'Math', '90'], ['Tom', 'French', '85'], 
            ['Rob', 'English', '87'], ['Rob', 'French', '92']]
            
result = transform_to_output(test_set)
print(result)

potters_wheel_unfold_3_1

def transform_dataset(test_set):
    subjects = ['Math', 'French', 'English']
    students = {}
    
    for record in test_set:
        student, subject, score = record
        if student not in students:
            students[student] = ['', '', '']
        subject_index = subjects.index(subject)
        students[student][subject_index] = score
    
    output_dataset = [[''] + subjects]
    for student, scores in students.items():
        output_dataset.append([student] + scores)
    
    return output_dataset

# Test
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Bob', 'English', '96'], ['Bob', 'French', '54'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
print(transform_dataset(test_set))

potters_wheel_unfold_4_1

def transform_dataset(test_set):
    # Extract subjects from the test set
    subjects = sorted(list({entry[1] for entry in test_set}))

    # Initialize the output dataset with header
    output_dataset = [[''] + subjects]

    # Using dictionary to map names to their scores by subject
    scores = {}
    
    # Organize input data into a dictionary
    for name, subject, score in test_set:
        if name not in scores:
            scores[name] = {subj: '' for subj in subjects}  # Initialize empty scores for all subjects
        scores[name][subject] = score  # Assign the score for the given subject

    # Construct the output dataset
    for name, score_dict in scores.items():
        row = [name] + [score_dict[subj] for subj in subjects]
        output_dataset.append(row)
    
    return output_dataset

# Test the function with the provided test set
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
output = transform_dataset(test_set)
print(output)

potters_wheel_unfold_5_1

def transform_data(test_set):
    subjects = set(subject for _, subject, _ in test_set)
    sorted_subjects = sorted(subjects)
    header = [''] + sorted_subjects
    student_scores = {}
    
    for student, subject, score in test_set:
        if student not in student_scores:
            student_scores[student] = [''] * len(sorted_subjects)
        subject_index = sorted_subjects.index(subject)
        student_scores[student][subject_index] = score
    
    output = [header]
    for student, scores in student_scores.items():
        output.append([student] + scores)
    
    return output

test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
print(transform_data(test_set))

potters_wheel_unfold_1_2

def transform_dataset(test_set):
    subjects = sorted(set(entry[1] for entry in test_set))
    results = [[''] + subjects]
    
    students = {}
    for entry in test_set:
        student = entry[0]
        subject = entry[1]
        score = entry[2]
        if student not in students:
            students[student] = {subject: score}
        else:
            students[student][subject] = score

    for student, scores in students.items():
        row = [student] + [scores.get(subject, '') for subject in subjects]
        results.append(row)
    
    return results

test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Bob', 'English', '96'], ['Bob', 'French', '54'], ['Joan', 'English', '79'], ['Tom', 'Math', '90'], ['Tom', 'French', '85'], ['Rob', 'English', '87'], ['Rob', 'French', '92']]
output = transform_dataset(test_set)
print(output)

potters_wheel_unfold_2_2

def transform_to_output(test_set):
    subjects = ['Math', 'French', 'English']
    students = {}
    
    for record in test_set:
        student, subject, score = record
        if student not in students:
            students[student] = ['', '', '']
        subject_index = subjects.index(subject)
        students[student][subject_index] = score
    
    output = [[''] + subjects]
    for student in sorted(students):
        output.append([student] + students[student])
    
    return output

# Test the function
test_set = [
    ['Anna', 'Math', '43'], 
    ['Anna', 'French', '78'], 
    ['Bob', 'English', '96'], 
    ['Bob', 'French', '54'], 
    ['Tom', 'Math', '90'], 
    ['Tom', 'French', '85'], 
    ['Rob', 'English', '87'], 
    ['Rob', 'French', '92']
]

transformed_output = transform_to_output(test_set)
print(transformed_output)

potters_wheel_unfold_3_2

def transform_dataset(test_set):
    subjects = ['Math', 'French', 'English']
    students = {}
    
    for record in test_set:
        student = record[0]
        subject = record[1]
        score = record[2]
        
        if student not in students:
            students[student] = ['', '', '']
        
        index = subjects.index(subject)
        students[student][index] = score
    
    output = [[''] + subjects]
    
    for student, scores in students.items():
        output.append([student] + scores)
    
    return output

# Test case
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Bob', 'English', '96'], 
            ['Bob', 'French', '54'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
output = transform_dataset(test_set)
print(output)

potters_wheel_unfold_4_2

def transform_dataset(test_set):
    # Extract subjects from the test set
    subjects = sorted(list(set([entry[1] for entry in test_set])))

    # Create a dictionary of students and their scores
    student_scores = {}
    for entry in test_set:
        name, subject, score = entry
        if name not in student_scores:
            student_scores[name] = {}
        student_scores[name][subject] = score

    # Prepare the header row
    output = [[''] + subjects]

    # Populate the output with student scores
    for student in sorted(student_scores.keys()):
        scores = [student_scores[student].get(subject, '') for subject in subjects]
        output.append([student] + scores)

    return output

# Example usage with the given test_set
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
result = transform_dataset(test_set)
print(result)

potters_wheel_unfold_5_2

def transform_data(test_set):
    subjects = set(item[1] for item in test_set)
    sorted_subjects = sorted(subjects)
    header = [''] + sorted_subjects
    student_scores = {}
    
    for student, subject, score in test_set:
        if student not in student_scores:
            student_scores[student] = [''] * len(sorted_subjects)
        subject_index = sorted_subjects.index(subject)
        student_scores[student][subject_index] = score
    
    output = [header]
    for student, scores in student_scores.items():
        output.append([student] + scores)
    
    return output

test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
print(transform_data(test_set))

potters_wheel_unfold_1_3

def transform_dataset(test_set):
    subjects = sorted(set(entry[1] for entry in test_set))
    results = [[''] + subjects]
    
    students = {}
    for entry in test_set:
        name, subject, score = entry
        if name not in students:
            students[name] = {}
        students[name][subject] = score
    
    for name, scores in students.items():
        row = [name] + [scores.get(subject, '') for subject in subjects]
        results.append(row)
    
    return results

# Example usage:
test_set = [
    ['Anna', 'Math', '43'], 
    ['Anna', 'French', '78'], 
    ['Bob', 'English', '96'], 
    ['Bob', 'French', '54'], 
    ['Joan', 'English', '79'], 
    ['Tom', 'Math', '90'], 
    ['Tom', 'French', '85'], 
    ['Rob', 'English', '87'], 
    ['Rob', 'French', '92']
]

output = transform_dataset(test_set)
print(output)

potters_wheel_unfold_2_3

def transform_to_output(test_set):
    subjects = ['Math', 'French', 'English']
    students = {}
    
    for record in test_set:
        student = record[0]
        subject = record[1]
        score = record[2]
        
        if student not in students:
            students[student] = ['', '', '']
        
        index = subjects.index(subject)
        students[student][index] = score
    
    output = [[''] + subjects]
    
    for student, scores in students.items():
        output.append([student] + scores)
    
    return output

# Test case
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Bob', 'English', '96'], 
            ['Bob', 'French', '54'], ['Tom', 'Math', '90'], ['Tom', 'French', '85'], 
            ['Rob', 'English', '87'], ['Rob', 'French', '92']]
            
result = transform_to_output(test_set)
print(result)

potters_wheel_unfold_3_3

def transform_dataset(test_set):
    subjects = ['Math', 'French', 'English']
    students = {}
    
    for record in test_set:
        student = record[0]
        subject = record[1]
        score = record[2]
        
        if student not in students:
            students[student] = ['', '', '']
        
        index = subjects.index(subject)
        students[student][index] = score
    
    output = [[''] + subjects]
    
    for student, scores in students.items():
        output.append([student] + scores)
    
    return output

# Test case
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Bob', 'English', '96'], 
            ['Bob', 'French', '54'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
output = transform_dataset(test_set)
print(output)

potters_wheel_unfold_4_3

def transform_dataset(test_set):
    # Initialize the output dataset with the header
    output_dataset = [['', 'Math', 'French', 'English']]

    # Helper function to find or create a row for a student
    def find_or_create_student_row(student_name):
        for row in output_dataset:
            if row[0] == student_name:
                return row
        # If not found, create a new row for the student
        new_row = [student_name, '', '', '']
        output_dataset.append(new_row)
        return new_row

    # Process each entry in the test set
    for student, subject, score in test_set:
        row = find_or_create_student_row(student)
        if subject == 'Math':
            row[1] = score
        elif subject == 'French':
            row[2] = score
        elif subject == 'English':
            row[3] = score

    return output_dataset

# Test the function with the provided test set
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
result = transform_dataset(test_set)
print(result)

potters_wheel_unfold_5_3

def transform_data(test_set):
    subjects = set(item[1] for item in test_set)
    sorted_subjects = sorted(subjects)
    header = [''] + sorted_subjects
    student_records = {}
    
    for student, subject, score in test_set:
        if student not in student_records:
            student_records[student] = [''] * len(sorted_subjects)
        column_index = sorted_subjects.index(subject)
        student_records[student][column_index] = score
    
    output = [header]
    for student, scores in student_records.items():
        output.append([student] + scores)
    
    return output

test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
print(transform_data(test_set))

potters_wheel_unfold_1_4

def transform_dataset(test_set):
    subjects = sorted(set(entry[1] for entry in test_set))
    results = [[''] + subjects]
    
    students = {}
    for entry in test_set:
        name, subject, score = entry
        if name not in students:
            students[name] = {}
        students[name][subject] = score
    
    for name, scores in students.items():
        row = [name] + [scores.get(subject, '') for subject in subjects]
        results.append(row)
    
    return results

# Example usage:
test_set = [
    ['Anna', 'Math', '43'], 
    ['Anna', 'French', '78'], 
    ['Bob', 'English', '96'], 
    ['Bob', 'French', '54'], 
    ['Joan', 'English', '79'], 
    ['Tom', 'Math', '90'], 
    ['Tom', 'French', '85'], 
    ['Rob', 'English', '87'], 
    ['Rob', 'French', '92']
]

output = transform_dataset(test_set)
print(output)

potters_wheel_unfold_2_4

def transform_to_output(test_set):
    subjects = ['Math', 'French', 'English']
    students = {}
    
    for record in test_set:
        student = record[0]
        subject = record[1]
        score = record[2]
        
        if student not in students:
            students[student] = ['', '', '']
        
        index = subjects.index(subject)
        students[student][index] = score

    output = [[''] + subjects]
    
    for student, scores in students.items():
        output.append([student] + scores)
    
    return output

# Test case
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Bob', 'English', '96'], 
            ['Bob', 'French', '54'], ['Tom', 'Math', '90'], ['Tom', 'French', '85'], 
            ['Rob', 'English', '87'], ['Rob', 'French', '92']]
            
result = transform_to_output(test_set)
print(result)

potters_wheel_unfold_3_4

def transform_dataset(test_set):
    subjects = ['Math', 'French', 'English']
    students = {}
    
    for record in test_set:
        student, subject, score = record
        if student not in students:
            students[student] = ['', '', '']
        subject_index = subjects.index(subject)
        students[student][subject_index] = score
    
    output = [[''] + subjects]
    for student, scores in students.items():
        output.append([student] + scores)
    
    return output

test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Bob', 'English', '96'], ['Bob', 'French', '54'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
result = transform_dataset(test_set)
print(result)

potters_wheel_unfold_4_4

def transform_dataset(test_set):
    # Initialize the output dataset with headers
    subjects = ['Math', 'French', 'English']
    transformed = [[''] + subjects]

    # Create a dictionary to hold student grades
    grades = {}

    # Process each entry in the test set
    for entry in test_set:
        student, subject, score = entry
        if student not in grades:
            grades[student] = {subj: '' for subj in subjects}
        grades[student][subject] = score
    
    # Fill the output dataset based on the grades dictionary
    for student, scores in grades.items():
        row = [student] + [scores[subj] for subj in subjects]
        transformed.append(row)

    return transformed

# Test the function with the given test set
test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
print(transform_dataset(test_set))

potters_wheel_unfold_5_4

def transform_data(test_set):
    subjects = set(item[1] for item in test_set)
    sorted_subjects = sorted(subjects)
    header = [''] + sorted_subjects
    student_scores = {}
    
    for student, subject, score in test_set:
        if student not in student_scores:
            student_scores[student] = [''] * len(sorted_subjects)
        subject_index = sorted_subjects.index(subject)
        student_scores[student][subject_index] = score
    
    output = [header]
    for student, scores in student_scores.items():
        output.append([student] + scores)
    
    return output

test_set = [['Anna', 'Math', '43'], ['Anna', 'French', '78'], ['Tom', 'Math', '90'], ['Tom', 'French', '85']]
print(transform_data(test_set))

proactive_wrangling_fold_1_0

def transform_dataset(dataset):
    output = []
    for row in dataset[1:]:
        country = row[0]
        for i in range(1, len(dataset[0])):
            output.append([country, dataset[0][i], row[i]])
    return output

test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['Belgium', '5', '6'], ['China', '7', '8'], ['France', '1', '1'], ['German', '2', '1']]
output = transform_dataset(test_set)
print(output)

proactive_wrangling_fold_2_0

def transform_dataset(test_set):
    output_dataset = []
    headers = test_set[0][1:]
    
    for row in test_set[1:]:
        country = row[0]
        for i, value in enumerate(row[1:]):
            output_dataset.append([country, headers[i], value])
    
    return output_dataset

# Test the function with the given test set
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['France', '1', '1'], ['German', '2', '1']]
output = transform_dataset(test_set)
print(output)

proactive_wrangling_fold_3_0

def transform_dataset(input_dataset):
    output_dataset = []
    for row in input_dataset[1:]:
        country = row[0]
        for i in range(1, len(input_dataset[0])):
            gender = input_dataset[0][i]
            value = row[i]
            output_dataset.append([country, gender, value])
    return output_dataset

# Test case
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
print(transform_dataset(test_set))

proactive_wrangling_fold_4_0

def transform_dataset(test_set):
    headers = test_set[0][1:]
    result = []
    for row in test_set[1:]:
        country = row[0]
        for i, header in enumerate(headers):
            result.append([country, header, row[i + 1]])
    return result

# Example usage
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
output = transform_dataset(test_set)
print(output)

proactive_wrangling_fold_5_0

def transform_dataset(input_data):
    output_data = []
    headers = input_data[0][1:]  # Extract 'Boys' and 'Girls'
    for row in input_data[1:]:
        country = row[0]
        values = row[1:]
        for header, value in zip(headers, values):
            output_data.append([country, header, value])
    return output_data

# Test the function with the provided test set
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
result = transform_dataset(test_set)
print(result)

proactive_wrangling_fold_1_1

def transform_dataset(dataset):
    output = []
    for row in dataset[1:]:
        country = row[0]
        for i in range(1, len(dataset[0])):
            output.append([country, dataset[0][i], row[i]])
    return output

# Test the function
test_set = [['', 'Boys', 'Girls'], 
            ['Austria', '3', '4'], 
            ['Belgium', '5', '6'], 
            ['China', '7', '8'], 
            ['France', '1', '1'], 
            ['German', '2', '1']]

transformed_output = transform_dataset(test_set)
print(transformed_output)

proactive_wrangling_fold_2_1

def transform_dataset(test_set):
    output_dataset = []
    headers = test_set[0][1:]
    
    for row in test_set[1:]:
        country = row[0]
        for i in range(1, len(row)):
            output_dataset.append([country, headers[i-1], row[i]])
    
    return output_dataset

# Example usage with the test set:
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['France', '1', '1'], ['German', '2', '1']]
output = transform_dataset(test_set)
print(output)

proactive_wrangling_fold_3_1

def transform_dataset(input_dataset):
    output_dataset = []
    for row in input_dataset[1:]:
        country = row[0]
        for i in range(1, len(input_dataset[0])):
            gender = input_dataset[0][i]
            value = row[i]
            output_dataset.append([country, gender, value])
    return output_dataset

# Test case
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
print(transform_dataset(test_set))

proactive_wrangling_fold_4_1

def transform_dataset(test_set):
    result = []
    for row in test_set[1:]:
        country = row[0]
        for i in range(1, len(test_set[0])):
            category = test_set[0][i]
            value = row[i]
            result.append([country, category, value])
    return result

# Test set
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]

# Transform the test set
transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

proactive_wrangling_fold_5_1

def transform_dataset(input_data):
    output_data = []
    headers = input_data[0][1:]  # Extract 'Boys' and 'Girls'
    
    for row in input_data[1:]:
        country = row[0]
        for i, value in enumerate(row[1:], start=1):
            output_data.append([country, headers[i-1], value])
    
    return output_data

# Test set
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
print(transform_dataset(test_set))

proactive_wrangling_fold_1_2

def transform_dataset(dataset):
    output = []
    for row in dataset[1:]:
        country = row[0]
        for i in range(1, len(dataset[0])):
            output.append([country, dataset[0][i], row[i]])
    return output

# Test the function
test_set = [['', 'Boys', 'Girls'], 
            ['Austria', '3', '4'], 
            ['Belgium', '5', '6'], 
            ['China', '7', '8'], 
            ['France', '1', '1'], 
            ['German', '2', '1']]

transformed_output = transform_dataset(test_set)
print(transformed_output)

proactive_wrangling_fold_2_2

def transform_dataset(test_set):
    output_dataset = []
    headers = test_set[0][1:]
    
    for row in test_set[1:]:
        country = row[0]
        for i in range(1, len(row)):
            output_dataset.append([country, headers[i-1], row[i]])
    
    return output_dataset

# Example usage with the test set:
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['France', '1', '1'], ['German', '2', '1']]
result = transform_dataset(test_set)
print(result)

proactive_wrangling_fold_3_2

def transform_dataset(input_dataset):
    output_dataset = []
    for row in input_dataset[1:]:
        country = row[0]
        for i in range(1, len(input_dataset[0])):
            gender = input_dataset[0][i]
            value = row[i]
            output_dataset.append([country, gender, value])
    return output_dataset

# Test case
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
print(transform_dataset(test_set))

proactive_wrangling_fold_4_2

def transform_dataset(test_set):
    result = []
    for row in test_set[1:]:
        country = row[0]
        for i in range(1, len(test_set[0])):
            category = test_set[0][i]
            value = row[i]
            result.append([country, category, value])
    return result

# Test set
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]

# Transform the test set
transformed_test_set = transform_dataset(test_set)
print(transformed_test_set)

proactive_wrangling_fold_5_2

def transform_dataset(input_data):
    output_data = []
    headers = input_data[0][1:]  # Extract 'Boys' and 'Girls'
    
    for row in input_data[1:]:
        country = row[0]
        for i, value in enumerate(row[1:], start=1):
            output_data.append([country, headers[i-1], value])
    
    return output_data

# Test set
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
print(transform_dataset(test_set))

proactive_wrangling_fold_1_3

def transform_dataset(dataset):
    output = []
    for row in dataset[1:]:
        country = row[0]
        for i in range(1, len(dataset[0])):
            output.append([country, dataset[0][i], row[i]])
    return output

# Test the function
test_set = [['', 'Boys', 'Girls'], 
            ['Austria', '3', '4'], 
            ['Belgium', '5', '6'], 
            ['China', '7', '8'], 
            ['France', '1', '1'], 
            ['German', '2', '1']]

transformed_output = transform_dataset(test_set)
print(transformed_output)

proactive_wrangling_fold_2_3

def transform_dataset(test_set):
    output_dataset = []
    headers = test_set[0][1:]
    
    for row in test_set[1:]:
        country = row[0]
        for i in range(1, len(row)):
            output_dataset.append([country, headers[i-1], row[i]])
    
    return output_dataset

# Example usage with the provided test set
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['France', '1', '1'], ['German', '2', '1']]
output = transform_dataset(test_set)
print(output)

proactive_wrangling_fold_3_3

def transform_dataset(input_dataset):
    output_dataset = []
    for row in input_dataset[1:]:
        country = row[0]
        for i in range(1, len(input_dataset[0])):
            gender = input_dataset[0][i]
            value = row[i]
            output_dataset.append([country, gender, value])
    return output_dataset

# Test case
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
print(transform_dataset(test_set))

proactive_wrangling_fold_4_3

def transform_dataset(test_set):
    headers = test_set[0][1:]
    result = []
    for row in test_set[1:]:
        country = row[0]
        for i, header in enumerate(headers):
            result.append([country, header, row[i + 1]])
    return result

# Example usage
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
output = transform_dataset(test_set)
print(output)

proactive_wrangling_fold_5_3

def transform_dataset(input_data):
    output_data = []
    headers = input_data[0][1:]  # Extract 'Boys' and 'Girls'
    
    for row in input_data[1:]:
        country = row[0]
        for i, value in enumerate(row[1:], start=1):
            output_data.append([country, headers[i-1], value])
    
    return output_data

# Test set
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
print(transform_dataset(test_set))

proactive_wrangling_fold_1_4

def transform_dataset(dataset):
    output = []
    for row in dataset[1:]:
        country = row[0]
        for i in range(1, len(dataset[0])):
            output.append([country, dataset[0][i], row[i]])
    return output

# Test the function
test_set = [['', 'Boys', 'Girls'], 
            ['Austria', '3', '4'], 
            ['Belgium', '5', '6'], 
            ['China', '7', '8'], 
            ['France', '1', '1'], 
            ['German', '2', '1']]

result = transform_dataset(test_set)
for row in result:
    print(row)

proactive_wrangling_fold_2_4

def transform_dataset(test_set):
    output_dataset = []
    headers = test_set[0][1:]
    
    for row in test_set[1:]:
        country = row[0]
        for i in range(1, len(row)):
            output_dataset.append([country, headers[i-1], row[i]])
    
    return output_dataset

# Example usage with the test set:
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['France', '1', '1'], ['German', '2', '1']]
output = transform_dataset(test_set)
print(output)

proactive_wrangling_fold_3_4

def transform_dataset(input_dataset):
    output_dataset = []
    for row in input_dataset[1:]:
        country = row[0]
        for i in range(1, len(input_dataset[0])):
            gender = input_dataset[0][i]
            value = row[i]
            output_dataset.append([country, gender, value])
    return output_dataset

# Test case
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
print(transform_dataset(test_set))

proactive_wrangling_fold_4_4

def transform_dataset(test_set):
    headers = test_set[0][1:]
    result = []
    for row in test_set[1:]:
        country = row[0]
        for i, header in enumerate(headers):
            result.append([country, header, row[i + 1]])
    return result

# Example usage
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
output = transform_dataset(test_set)
print(output)

proactive_wrangling_fold_5_4

def transform_dataset(input_data):
    output_data = []
    headers = input_data[0][1:]  # Extract 'Boys' and 'Girls'
    
    for row in input_data[1:]:
        country = row[0]
        for i, value in enumerate(row[1:], start=1):
            output_data.append([country, headers[i-1], value])
    
    return output_data

# Test set
test_set = [['', 'Boys', 'Girls'], ['Austria', '3', '4'], ['China', '7', '8'], ['German', '2', '1']]
print(transform_dataset(test_set))

